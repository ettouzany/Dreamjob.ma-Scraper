{
    "course": "Learn HTML5",
    "description": "CSS is a style sheet language used for describing the presentation of a document written in a markup language. CSS is designed to be used by people who are not familiar with HTML or XML, so there is some basic knowledge of the HTML language required to effectively use CSS.",
    "parts": 117,
    "prerequisites": [
        "HTML"
    ],
    "lectures": [
        {
            "title": "Overview",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>HTML5 is the next major revision of the HTML standard superseding HTML 4.01, XHTML 1.0, and XHTML 1.1. HTML5 is a standard for structuring and presenting content on the World Wide Web.</p>\n<p>HTML5 is a cooperation between the World Wide Web Consortium (W3C) and the Web Hypertext Application Technology Working Group (WHATWG).</p>\n<p>The new standard incorporates features like video playback and drag-and-drop that have been previously dependent on third-party browser plug-ins such as Adobe Flash, Microsoft Silverlight, and Google Gears.</p>\n"
                },
                {
                    "title": "Browser Support",
                    "html": "<p>\n The latest versions of Apple Safari, Google Chrome, Mozilla Firefox, and Opera all support many HTML5 features and Internet Explorer 9.0 will also have support for some HTML5 functionality.\n</p>\n<p>\n The mobile web browsers that come pre-installed on iPhones, iPads, and Android phones all have excellent support for HTML5.\n</p>\n"
                },
                {
                    "title": "New Features",
                    "html": "<p>\n HTML5 introduces a number of new elements and attributes that can help you in building modern websites. Here is a set of some of the most prominent features introduced in HTML5.\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   <b>\n    New Semantic Elements\n   </b>\n   −  These are like &lt;header&gt;, &lt;footer&gt;, and &lt;section&gt;.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Forms 2.0\n   </b>\n   − Improvements to HTML web forms where new attributes have been introduced for &lt;input&gt; tag.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Persistent Local Storage\n   </b>\n   − To achieve without resorting to third-party plugins.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    WebSocket\n   </b>\n   − A next-generation bidirectional communication technology for web applications.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Server-Sent Events\n   </b>\n   − HTML5 introduces events which flow from web server to the web browsers and they are called Server-Sent Events (SSE).\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Canvas\n   </b>\n   − This supports a two-dimensional drawing surface that you can program with JavaScript.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Audio &amp; Video\n   </b>\n   −  You can embed audio or video on your webpages without resorting to third-party plugins.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Geolocation\n   </b>\n   − Now visitors can choose to share their physical location with your web application.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Microdata\n   </b>\n   − This lets you create your own vocabularies beyond HTML5 and extend your web pages with custom semantics.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Drag and drop\n   </b>\n   − Drag and drop the items from one location to another location on the same webpage.\n  </p>\n </li>\n</ul>\n"
                },
                {
                    "title": "Backward Compatibility",
                    "html": "<p>\n HTML5 is designed, as much as possible, to be backward compatible with existing web browsers. Its new features have been built on existing features and allow you to provide fallback content for older browsers.\n</p>\n<p>\n It is suggested to detect support for individual HTML5 features using a few lines of JavaScript.\n</p>\n<p>\n If you are not familiar with any previous version of HTML, I would recommend that you go through our\n <b>\n  HTML Tutorial\n </b>\n before exploring the features of HTML5.\n</p>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/index.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_syntax.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Syntax",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>The HTML 5 language has a \"custom\" HTML syntax that is compatible with HTML 4 and XHTML1 documents published on the Web, but is not compatible with the more esoteric SGML features of HTML 4.</p>\n<p>HTML 5 does not have the same syntax rules as XHTML where we needed lower case tag names, quoting our attributes, an attribute had to have a value and to close all empty elements.</p>\n<p>HTML5 comes with a lot of flexibility and it supports the following features −</p>\n<ul class=\"list\">\n<li>Uppercase tag names.</li>\n<li>Quotes are optional for attributes.</li>\n<li>Attribute values are optional.</li>\n<li>Closing empty elements are optional.</li>\n</ul>\n"
                },
                {
                    "title": "The DOCTYPE",
                    "html": "<p>\n DOCTYPEs in older versions of HTML were longer because the HTML language was SGML based and therefore required a reference to a DTD.\n</p>\n<p>\n HTML 5 authors would use simple syntax to specify DOCTYPE as follows −\n</p>\n<pre class=\"result notranslate\">\n&lt;!DOCTYPE html&gt;\n</pre>\n<p>\n The above syntax is case-insensitive.\n</p>\n"
                },
                {
                    "title": "Character Encoding",
                    "html": "<p>\n HTML 5 authors can use simple syntax to specify Character Encoding as follows −\n</p>\n<pre class=\"result notranslate\">\n&lt;meta charset = \"UTF-8\"&gt;\n</pre>\n<p>\n The above syntax is case-insensitive.\n</p>\n"
                },
                {
                    "title": "The <script> tag",
                    "html": "<p>\n It's common practice to add a type attribute with a value of \"text/javascript\" to script elements as follows −\n</p>\n<pre class=\"result notranslate\">\n&lt;script type = \"text/javascript\" src = \"scriptfile.js\"&gt;&lt;/script&gt; \n</pre>\n<p>\n HTML 5 removes extra information required and you can use simply following syntax −\n</p>\n<pre class=\"result notranslate\">\n&lt;script src = \"scriptfile.js\"&gt;&lt;/script&gt;\n</pre>\n"
                },
                {
                    "title": "The <link> tag",
                    "html": "<p>\n So far you were writing &lt;link&gt; as follows −\n</p>\n<pre class=\"result notranslate\">\n&lt;link rel = \"stylesheet\" type = \"text/css\" href = \"stylefile.css\"&gt;\n</pre>\n<p>\n HTML 5 removes extra information required and you can simply use the following syntax −\n</p>\n<pre class=\"result notranslate\">\n&lt;link rel = \"stylesheet\" href = \"stylefile.css\"&gt;\n</pre>\n"
                },
                {
                    "title": "HTML5 Elements",
                    "html": "<p>\n HTML5 elements are marked up using start tags and end tags. Tags are delimited using angle brackets with the tag name in between.\n</p>\n<p>\n The difference between start tags and end tags is that the latter includes a slash before the tag name.\n</p>\n<p>\n Following is the example of an HTML5 element −\n</p>\n<pre class=\"result notranslate\">\n&lt;p&gt;...&lt;/p&gt;\n</pre>\n<p>\n HTML5 tag names are case insensitive and may be written in all uppercase or mixed case, although the most common convention is to stick with lowercase.\n</p>\n<p>\n Most of the elements contain some content like &lt;p&gt;...&lt;/p&gt; contains a paragraph. Some elements, however, are forbidden from containing any content at all and these are known as void elements. For example,\n <b>\n  br, hr, link, meta\n </b>\n , etc.\n</p>\n<p>\n Here is a complete list of\n <a href=\"/html5/html5_tags.htm\">\n  HTML5 Elements\n </a>\n .\n</p>\n"
                },
                {
                    "title": "HTML5 Attributes",
                    "html": "<p>\n Elements may contain attributes that are used to set various properties of an element.\n</p>\n<p>\n Some attributes are defined globally and can be used on any element, while others are defined for specific elements only. All attributes have a name and a value and look like as shown below in the example.\n</p>\n<p>\n Following is the example of an HTML5 attribute which illustrates how to mark up a div element with an attribute named class using a value of \"example\" −\n</p>\n<pre class=\"result notranslate\">\n&lt;div class = \"example\"&gt;...&lt;/div&gt;\n</pre>\n<p>\n Attributes may only be specified within start tags and must never be used in end tags.\n</p>\n<p>\n HTML5 attributes are case insensitive and may be written in all uppercase or mixed case, although the most common convention is to stick with lowercase.\n</p>\n<p>\n Here is a complete list of\n <a href=\"/html5/html5_attributes.htm\">\n  HTML5 Attributes\n </a>\n .\n</p>\n"
                },
                {
                    "title": "HTML5 Document",
                    "html": "<p>\n The following tags have been introduced for better structure −\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   <b>\n    section\n   </b>\n   − This tag represents a generic document or application section. It can be used together with h1-h6 to indicate the document structure.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    article\n   </b>\n   − This tag represents an independent piece of content of a document, such as a blog entry or newspaper article.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    aside\n   </b>\n   − This tag represents a piece of content that is only slightly related to the rest of the page.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    header\n   </b>\n   − This tag represents the header of a section.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    footer\n   </b>\n   − This tag represents a footer for a section and can contain information about the author, copyright information, et cetera.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    nav\n   </b>\n   − This tag represents a section of the document intended for navigation.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    dialog\n   </b>\n   − This tag can be used to mark up a conversation.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    figure\n   </b>\n   − This tag can be used to associate a caption together with some embedded content, such as a graphic or video.\n  </p>\n </li>\n</ul>\n<p>\n The markup for an HTML 5 document would look like the following −\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt; \n\n&lt;html&gt;  \n   &lt;head&gt; \n      &lt;meta charset = \"utf-8\"&gt; \n      &lt;title&gt;...&lt;/title&gt; \n   &lt;/head&gt; \n  \n   &lt;body&gt; \n      &lt;header&gt;...&lt;/header&gt; \n      &lt;nav&gt;...&lt;/nav&gt; \n      \n      &lt;article&gt; \n         &lt;section&gt; \n            ... \n         &lt;/section&gt; \n      &lt;/article&gt; \n      &lt;aside&gt;...&lt;/aside&gt; \n      \n      &lt;footer&gt;...&lt;/footer&gt; \n   &lt;/body&gt; \n&lt;/html&gt; \n</pre>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/g20Tmz\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;  \n\n&lt;html&gt;  \n   &lt;head&gt; \n      &lt;meta charset = \"utf-8\"&gt; \n      &lt;title&gt;...&lt;/title&gt; \n   &lt;/head&gt; \n  \n   &lt;body&gt; \n      &lt;header role = \"banner\"&gt; \n         &lt;h1&gt;HTML5 Document Structure Example&lt;/h1&gt; \n         &lt;p&gt;This page should be tried in safari, chrome or Mozila.&lt;/p&gt; \n      &lt;/header&gt; \n   \n      &lt;nav&gt; \n         &lt;ul&gt; \n            &lt;li&gt;&lt;a href = \"https://www.tutorialspoint.com/html\"&gt;HTML Tutorial&lt;/a&gt;&lt;/li&gt; \n            &lt;li&gt;&lt;a href = \"https://www.tutorialspoint.com/css\"&gt;CSS Tutorial&lt;/a&gt;&lt;/li&gt; \n            &lt;li&gt;&lt;a href = \"https://www.tutorialspoint.com/javascript\"&gt;\n            JavaScript Tutorial&lt;/a&gt;&lt;/li&gt; \n         &lt;/ul&gt; \n      &lt;/nav&gt; \n   \n      &lt;article&gt; \n         &lt;section&gt; \n            &lt;p&gt;Once article can have multiple sections&lt;/p&gt;\n         &lt;/section&gt; \n      &lt;/article&gt; \n   \n      &lt;aside&gt; \n         &lt;p&gt;This is  aside part of the web page&lt;/p&gt; \n      &lt;/aside&gt; \n   \n      &lt;footer&gt; \n         &lt;p&gt;Created by &lt;a href = \"https://tutorialspoint.com/\"&gt;Tutorials Point&lt;/a&gt;&lt;/p&gt; \n      &lt;/footer&gt; \n   \n   &lt;/body&gt; \n&lt;/html&gt; \n</pre>\n<p>\n It will produce the following result −\n</p>\n<iframe class=\"result\" height=\"450px\" onload=\"resizeFrame(this)\" src=\"/html5/src/syntax.htm\" width=\"660px\">\n</iframe>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_overview.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_attributes.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Attributes",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>As explained in the previous chapter, elements may contain attributes that are used to set various properties of an element.</p>\n<p>Some attributes are defined globally and can be used on any element, while others are defined for specific elements only. All attributes have a name and a value and look like as shown below in the example.</p>\n<p>Following is the example of an HTML5 attributes which illustrates how to mark up a div element with an attribute named class using a value of \"example\" −</p>\n<pre class=\"result notranslate\">\n&lt;div class = \"example\"&gt;...&lt;/div&gt;\n</pre>\n<p>Attributes may only be specified within <b>start tags</b> and must never be used in <b>end tags</b>.</p>\n<p>HTML5 attributes are case insensitive and may be written in all uppercase or mixed case, although the most common convention is to stick with lowercase.</p>\n"
                },
                {
                    "title": "Standard Attributes",
                    "html": "<p>\n The attributes listed below are supported by almost all the HTML 5 tags.\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Attribute\n  </th>\n  <th style=\"text-align:center;\">\n   Options\n  </th>\n  <th style=\"text-align:center;\">\n   Function\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   accesskey\n  </td>\n  <td style=\"vertical-align:middle;\">\n   User Defined\n  </td>\n  <td>\n   Specifies a keyboard shortcut to access an element.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   align\n  </td>\n  <td style=\"vertical-align:middle;\">\n   right, left, center\n  </td>\n  <td>\n   Horizontally aligns tags\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   background\n  </td>\n  <td style=\"vertical-align:middle;\">\n   URL\n  </td>\n  <td>\n   Places an background image behind an element\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   bgcolor\n  </td>\n  <td style=\"vertical-align:middle;\">\n   numeric, hexidecimal, RGB values\n  </td>\n  <td>\n   Places a background color behind an element\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   class\n  </td>\n  <td style=\"vertical-align:middle;\">\n   User Defined\n  </td>\n  <td>\n   Classifies an element for use with Cascading Style Sheets.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   contenteditable\n  </td>\n  <td style=\"vertical-align:middle;\">\n   true, false\n  </td>\n  <td>\n   Specifies if the user can edit the element's content or not.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   contextmenu\n  </td>\n  <td style=\"vertical-align:middle;\">\n   Menu id\n  </td>\n  <td>\n   Specifies the context menu for an element.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   data-XXXX\n  </td>\n  <td style=\"vertical-align:middle;\">\n   User Defined\n  </td>\n  <td>\n   Custom attributes. Authors of a HTML document can define their own attributes. Must start with \"data-\".\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   draggable\n  </td>\n  <td style=\"vertical-align:middle;\">\n   true,false, auto\n  </td>\n  <td>\n   Specifies whether or not a user is allowed to drag an element.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   height\n  </td>\n  <td style=\"vertical-align:middle;\">\n   Numeric Value\n  </td>\n  <td>\n   Specifies the height of tables, images, or table cells.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   hidden\n  </td>\n  <td style=\"vertical-align:middle;\">\n   hidden\n  </td>\n  <td>\n   Specifies whether element should be visible or not.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   id\n  </td>\n  <td style=\"vertical-align:middle;\">\n   User Defined\n  </td>\n  <td>\n   Names an element for use with Cascading Style Sheets.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   item\n  </td>\n  <td style=\"vertical-align:middle;\">\n   List of elements\n  </td>\n  <td>\n   Used to group elements.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   itemprop\n  </td>\n  <td style=\"vertical-align:middle;\">\n   List of items\n  </td>\n  <td>\n   Used to group items.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   spellcheck\n  </td>\n  <td style=\"vertical-align:middle;\">\n   true, false\n  </td>\n  <td>\n   Specifies if the element must have it's spelling or grammar checked.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   style\n  </td>\n  <td style=\"vertical-align:middle;\">\n   CSS Style sheet\n  </td>\n  <td>\n   Specifies an inline style for an element.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   subject\n  </td>\n  <td style=\"vertical-align:middle;\">\n   User define id\n  </td>\n  <td>\n   Specifies the element's corresponding item.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   tabindex\n  </td>\n  <td style=\"vertical-align:middle;\">\n   Tab number\n  </td>\n  <td>\n   Specifies the tab order of an element.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   title\n  </td>\n  <td style=\"vertical-align:middle;\">\n   User Defined\n  </td>\n  <td>\n   \"Pop-up\" title for your elements.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   valign\n  </td>\n  <td style=\"vertical-align:middle;\">\n   top, middle, bottom\n  </td>\n  <td>\n   Vertically aligns tags within an HTML element.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   width\n  </td>\n  <td style=\"vertical-align:middle;\">\n   Numeric Value\n  </td>\n  <td>\n   Specifies the width of tables, images, or table cells.\n  </td>\n </tr>\n</table>\n<p>\n For a complete list of HTML5 Tags and related attributes, please check our reference to\n <a href=\"/html5/html5_tags.htm\">\n  HTML5 Tags\n </a>\n .\n</p>\n"
                },
                {
                    "title": "Custom Attributes",
                    "html": "<p>\n A new feature being introduced in HTML 5 is the addition of custom data attributes.\n</p>\n<p>\n A custom data attribute starts with\n <b>\n  data-\n </b>\n and would be named based on your requirement. Here is a simple example −\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;div class = \"example\" data-subject = \"physics\" data-level = \"complex\"&gt;\n   ...\n&lt;/div&gt;\n</pre>\n<p>\n The above code will be perfectly valid HTML5 with two custom attributes called\n <i>\n  datasubject\n </i>\n and\n <i>\n  data-level\n </i>\n . You would be able to get the values of these attributes using JavaScript APIs or CSS in similar way as you get for standard attributes.\n</p>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_syntax.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_events.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Events",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>When users visit your website, they perform various activities such as clicking on text and images and links, hover over defined elements, etc. These are examples of what JavaScript calls <b>events</b>.</p>\n<p>We can write our event handlers in Javascript or VBscript and you can specify these event handlers as a value of event tag attribute. The HTML5 specification defines various event attributes as listed below −</p>\n<p>We can use the following set of attributes to trigger any <b>javascript</b> or <b>vbscript</b> code given as value, when there is any event that takes place for any HTML5 element.</p>\n<p>We would cover element-specific events while discussing those elements in detail in subsequent chapters.</p>\n<table class=\"table table-bordered\">\n<tr>\n<th style=\"text-align:center;\">Attribute</th>\n<th style=\"text-align:center;\">Value</th>\n<th style=\"text-align:center;\">Description</th>\n</tr>\n<tr>\n<td>offline</td>\n<td>script</td>\n<td>Triggers when the document goes offline</td>\n</tr>\n<tr>\n<td>onabort</td>\n<td>script</td>\n<td>Triggers on an abort event</td>\n</tr>\n<tr>\n<td>onafterprint</td>\n<td>script</td>\n<td>Triggers after the document is printed</td>\n</tr>\n<tr>\n<td>onbeforeonload</td>\n<td>script</td>\n<td>Triggers before the document loads</td>\n</tr>\n<tr>\n<td>onbeforeprint</td>\n<td>script</td>\n<td>Triggers before the document is printed</td>\n</tr>\n<tr>\n<td>onblur</td>\n<td>script</td>\n<td>Triggers when the window loses focus</td>\n</tr>\n<tr>\n<td>oncanplay</td>\n<td>script</td>\n<td>Triggers when media can start play, but might has to stop for buffering</td>\n</tr>\n<tr>\n<td>oncanplaythrough</td>\n<td>script</td>\n<td>Triggers when media can be played to the end, without stopping for buffering</td>\n</tr>\n<tr>\n<td>onchange</td>\n<td>script</td>\n<td>Triggers when an element changes</td>\n</tr>\n<tr>\n<td>onclick</td>\n<td>script</td>\n<td>Triggers on a mouse click</td>\n</tr>\n<tr>\n<td>oncontextmenu</td>\n<td>script</td>\n<td>Triggers when a context menu is triggered</td>\n</tr>\n<tr>\n<td>ondblclick</td>\n<td>script</td>\n<td>Triggers on a mouse double-click</td>\n</tr>\n<tr>\n<td>ondrag</td>\n<td>script</td>\n<td>Triggers when an element is dragged</td>\n</tr>\n<tr>\n<td>ondragend</td>\n<td>script</td>\n<td>Triggers at the end of a drag operation</td>\n</tr>\n<tr>\n<td>ondragenter</td>\n<td>script</td>\n<td>Triggers when an element has been dragged to a valid drop target</td>\n</tr>\n<tr>\n<td>ondragleave</td>\n<td>script</td>\n<td>Triggers when an element leaves a valid drop target</td>\n</tr>\n<tr>\n<td>ondragover</td>\n<td>script</td>\n<td>Triggers when an element is being dragged over a valid drop target</td>\n</tr>\n<tr>\n<td>ondragstart</td>\n<td>script</td>\n<td>Triggers at the start of a drag operation</td>\n</tr>\n<tr>\n<td>ondrop</td>\n<td>script</td>\n<td>Triggers when dragged element is being dropped</td>\n</tr>\n<tr>\n<td>ondurationchange</td>\n<td>script</td>\n<td>Triggers when the length of the media is changed</td>\n</tr>\n<tr>\n<td>onemptied</td>\n<td>script</td>\n<td>Triggers when a media resource element suddenly becomes empty.</td>\n</tr>\n<tr>\n<td>onended</td>\n<td>script</td>\n<td>Triggers when media has reach the end</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>script</td>\n<td>Triggers when an error occur</td>\n</tr>\n<tr>\n<td>onfocus</td>\n<td>script</td>\n<td>Triggers when the window gets focus</td>\n</tr>\n<tr>\n<td>onformchange</td>\n<td>script</td>\n<td>Triggers when a form changes</td>\n</tr>\n<tr>\n<td>onforminput</td>\n<td>script</td>\n<td>Triggers when a form gets user input</td>\n</tr>\n<tr>\n<td>onhaschange</td>\n<td>script</td>\n<td>Triggers when the document has change</td>\n</tr>\n<tr>\n<td>oninput</td>\n<td>script</td>\n<td>Triggers when an element gets user input</td>\n</tr>\n<tr>\n<td>oninvalid</td>\n<td>script</td>\n<td>Triggers when an element is invalid</td>\n</tr>\n<tr>\n<td>onkeydown</td>\n<td>script</td>\n<td>Triggers when a key is pressed</td>\n</tr>\n<tr>\n<td>onkeypress</td>\n<td>script</td>\n<td>Triggers when a key is pressed and released</td>\n</tr>\n<tr>\n<td>onkeyup</td>\n<td>script</td>\n<td>Triggers when a key is released</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>script</td>\n<td>Triggers when the document loads</td>\n</tr>\n<tr>\n<td>onloadeddata</td>\n<td>script</td>\n<td>Triggers when media data is loaded</td>\n</tr>\n<tr>\n<td>onloadedmetadata</td>\n<td>script</td>\n<td>Triggers when the duration and other media data of a media element is loaded</td>\n</tr>\n<tr>\n<td>onloadstart</td>\n<td>script</td>\n<td>Triggers when the browser starts to load the media data</td>\n</tr>\n<tr>\n<td>onmessage</td>\n<td>script</td>\n<td>Triggers when the message is triggered</td>\n</tr>\n<tr>\n<td>onmousedown</td>\n<td>script</td>\n<td>Triggers when a mouse button is pressed</td>\n</tr>\n<tr>\n<td>onmousemove</td>\n<td>script</td>\n<td>Triggers when the mouse pointer moves</td>\n</tr>\n<tr>\n<td>onmouseout</td>\n<td>script</td>\n<td>Triggers when the mouse pointer moves out of an element</td>\n</tr>\n<tr>\n<td>onmouseover</td>\n<td>script</td>\n<td>Triggers when the mouse pointer moves over an element</td>\n</tr>\n<tr>\n<td>onmouseup</td>\n<td>script</td>\n<td>Triggers when a mouse button is released</td>\n</tr>\n<tr>\n<td>onmousewheel</td>\n<td>script</td>\n<td>Triggers when the mouse wheel is being rotated</td>\n</tr>\n<tr>\n<td>onoffline</td>\n<td>script</td>\n<td>Triggers when the document goes offline</td>\n</tr>\n<tr>\n<td>online</td>\n<td>script</td>\n<td>Triggers when the document comes online</td>\n</tr>\n<tr>\n<td>ononline</td>\n<td>script</td>\n<td>Triggers when the document comes online</td>\n</tr>\n<tr>\n<td>onpagehide</td>\n<td>script</td>\n<td>Triggers when the window is hidden</td>\n</tr>\n<tr>\n<td>onpageshow</td>\n<td>script</td>\n<td>Triggers when the window becomes visible</td>\n</tr>\n<tr>\n<td>onpause</td>\n<td>script</td>\n<td>Triggers when media data is paused</td>\n</tr>\n<tr>\n<td>onplay</td>\n<td>script</td>\n<td>Triggers when media data is going to start playing</td>\n</tr>\n<tr>\n<td>onplaying</td>\n<td>script</td>\n<td>Triggers when media data has start playing</td>\n</tr>\n<tr>\n<td>onpopstate</td>\n<td>script</td>\n<td>Triggers when the window's history changes</td>\n</tr>\n<tr>\n<td>onprogress</td>\n<td>script</td>\n<td>Triggers when the browser is fetching the media data</td>\n</tr>\n<tr>\n<td>onratechange</td>\n<td>script</td>\n<td>Triggers when the media data's playing rate has changed</td>\n</tr>\n<tr>\n<td>onreadystatechange</td>\n<td>script</td>\n<td>Triggers when the ready-state changes</td>\n</tr>\n<tr>\n<td>onredo</td>\n<td>script</td>\n<td>Triggers when the document performs a redo</td>\n</tr>\n<tr>\n<td>onresize</td>\n<td>script</td>\n<td>Triggers when the window is resized</td>\n</tr>\n<tr>\n<td>onscroll</td>\n<td>script</td>\n<td>Triggers when an element's scrollbar is being scrolled</td>\n</tr>\n<tr>\n<td>onseeked</td>\n<td>script</td>\n<td>Triggers when a media element's seeking attribute is no longer true, and the seeking has ended</td>\n</tr>\n<tr>\n<td>onseeking</td>\n<td>script</td>\n<td>Triggers when a media element's seeking attribute is true, and the seeking has begun</td>\n</tr>\n<tr>\n<td>onselect</td>\n<td>script</td>\n<td>Triggers when an element is selected</td>\n</tr>\n<tr>\n<td>onstalled</td>\n<td>script</td>\n<td>Triggers when there is an error in fetching media data</td>\n</tr>\n<tr>\n<td>onstorage</td>\n<td>script</td>\n<td>Triggers when a document loads</td>\n</tr>\n<tr>\n<td>onsubmit</td>\n<td>script</td>\n<td>Triggers when a form is submitted</td>\n</tr>\n<tr>\n<td>onsuspend</td>\n<td>script</td>\n<td>Triggers when the browser has been fetching media data, but stopped before the entire media file was fetched</td>\n</tr>\n<tr>\n<td>ontimeupdate</td>\n<td>script</td>\n<td>Triggers when media changes its playing position</td>\n</tr>\n<tr>\n<td>onundo</td>\n<td>script</td>\n<td>Triggers when a document performs an undo</td>\n</tr>\n<tr>\n<td>onunload</td>\n<td>script</td>\n<td>Triggers when the user leaves the document</td>\n</tr>\n<tr>\n<td>onvolumechange</td>\n<td>script</td>\n<td>Triggers when media changes the volume, also when volume is set to \"mute\"</td>\n</tr>\n<tr>\n<td>onwaiting</td>\n<td>script</td>\n<td>Triggers when media has stopped playing, but is expected to resume</td>\n</tr>\n</table>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n<a class=\"pre-btn\" href=\"/html5/html5_attributes.htm\"><i class=\"fal fa-chevron-circle-left\"></i> Previous Page</a>\n<a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\"><i class=\"fal fa-print\"></i> Print Page</a>\n<a class=\"nxt-btn\" href=\"/html5/html5_web_forms2.htm\">Next Page <i class=\"fal fa-chevron-circle-right\"></i> </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n<div>Advertisements</div>\n<div>\n<div id=\"adp_bottom_ads\"></div>\n<script>\n\t\t\t\t\t\tvar adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n\t\t\t\t\t</script>\n</div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Web Forms 2.0",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>Web Forms 2.0 is an extension to the forms features found in HTML4. Form elements and attributes in HTML5 provide a greater degree of semantic mark-up than HTML4 and free us from a great deal of tedious scripting and styling that was required in HTML4.</p>\n"
                },
                {
                    "title": "The <input> element in HTML4",
                    "html": "<p>\n HTML4 input elements use the\n <b>\n  type\n </b>\n attribute to specify the data type.HTML4 provides following types −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Type &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     text\n    </b>\n   </p>\n   <p>\n    A free-form text field, nominally free of line breaks.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     password\n    </b>\n   </p>\n   <p>\n    A free-form text field for sensitive information, nominally free of line breaks.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     checkbox\n    </b>\n   </p>\n   <p>\n    A set of zero or more values from a predefined list.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     radio\n    </b>\n   </p>\n   <p>\n    An enumerated value.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     submit\n    </b>\n   </p>\n   <p>\n    A free form of button initiates form submission.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <p>\n    <b>\n     file\n    </b>\n   </p>\n   <p>\n    An arbitrary file with a MIME type and optionally a file name.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   7\n  </td>\n  <td>\n   <p>\n    <b>\n     image\n    </b>\n   </p>\n   <p>\n    A coordinate, relative to a particular image's size, with the extra semantic that it must be the last value selected and initiates form submission.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   8\n  </td>\n  <td>\n   <p>\n    <b>\n     hidden\n    </b>\n   </p>\n   <p>\n    An arbitrary string that is not normally displayed to the user.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   9\n  </td>\n  <td>\n   <p>\n    <b>\n     select\n    </b>\n   </p>\n   <p>\n    An enumerated value, much like the radio type.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   10\n  </td>\n  <td>\n   <p>\n    <b>\n     textarea\n    </b>\n   </p>\n   <p>\n    A free-form text field, nominally with no line break restrictions.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   11\n  </td>\n  <td>\n   <p>\n    <b>\n     button\n    </b>\n   </p>\n   <p>\n    A free form of button which can initiates any event related to button.\n   </p>\n  </td>\n </tr>\n</table>\n<p>\n Following is the simple example of using labels, radio buttons, and submit buttons −\n</p>\n<pre class=\"prettyprint notranslate\">\n... \n&lt;form action = \"http://example.com/cgiscript.pl\" method = \"post\"&gt;  \n   &lt;p&gt; \n      &lt;label for = \"firstname\"&gt;first name: &lt;/label&gt; \n      &lt;input type = \"text\" id = \"firstname\"&gt;&lt;br /&gt; \n   \n      &lt;label for = \"lastname\"&gt;last name: &lt;/label&gt; \n      &lt;input type = \"text\" id = \"lastname\"&gt;&lt;br /&gt; \n   \n      &lt;label for = \"email\"&gt;email: &lt;/label&gt; \n      &lt;input type = \"text\" id = \"email\"&gt;&lt;br&gt; \n   \n      &lt;input type = \"radio\" name = \"sex\" value = \"male\"&gt; Male&lt;br&gt; \n      &lt;input type = \"radio\" name = \"sex\" value = \"female\"&gt; Female&lt;br&gt; \n      &lt;input type = \"submit\" value = \"send\"&gt; &lt;input type = \"reset\"&gt; \n   &lt;/p&gt; \n&lt;/form&gt; \n ... \n</pre>\n"
                },
                {
                    "title": "The <input> element in HTML5",
                    "html": "<p>\n Apart from the above-mentioned attributes, HTML5 input elements introduced several new values for the\n <b>\n  type\n </b>\n attribute. These are listed below.\n</p>\n<p>\n <b>\n  NOTE\n </b>\n − Try all the following example using latest version of\n <b>\n  Opera\n </b>\n browser.\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Type &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <a href=\"/html5/html5_datetime.htm\">\n    datetime\n   </a>\n   <p>\n    A date and time (year, month, day, hour, minute, second, fractions of a second) encoded according to ISO 8601 with the time zone set to UTC.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <a href=\"/html5/html5_datetime_local.htm\">\n    datetime-local\n   </a>\n   <p>\n    A date and time (year, month, day, hour, minute, second, fractions of a second) encoded according to ISO 8601, with no time zone information.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <a href=\"/html5/html5_date.htm\">\n    date\n   </a>\n   <p>\n    A date (year, month, day) encoded according to ISO 8601.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <a href=\"/html5/html5_month.htm\">\n    month\n   </a>\n   <p>\n    A date consisting of a year and a month encoded according to ISO 8601.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <a href=\"/html5/html5_week.htm\">\n    week\n   </a>\n   <p>\n    A date consisting of a year and a week number encoded according to ISO 8601.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <a href=\"/html5/html5_time.htm\">\n    time\n   </a>\n   <p>\n    A time (hour, minute, seconds, fractional seconds) encoded according to ISO 8601.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   7\n  </td>\n  <td>\n   <a href=\"/html5/html5_number.htm\">\n    number\n   </a>\n   <p>\n    It accepts only numerical value. The step attribute specifies the precision, defaulting to 1.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   8\n  </td>\n  <td>\n   <a href=\"/html5/html5_range.htm\">\n    range\n   </a>\n   <p>\n    The range type is used for input fields that should contain a value from a range of numbers.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   9\n  </td>\n  <td>\n   <a href=\"/html5/html5_email.htm\">\n    email\n   </a>\n   <p>\n    It accepts only email value. This type is used for input fields that should contain an e-mail address. If you try to submit a simple text, it forces to enter only email address in email@example.com format.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   10\n  </td>\n  <td>\n   <a href=\"/html5/html5_url.htm\">\n    url\n   </a>\n   <p>\n    It accepts only URL value. This type is used for input fields that should contain a URL address. If you try to submit a simple text, it forces to enter only URL address either in http://www.example.com format or in http://example.com format.\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "The <output> element",
                    "html": "<p>\n HTML5 introduced a new element &lt;output&gt; which is used to represent the result of different types of output, such as output written by a script.\n</p>\n<p>\n You can use the\n <b>\n  for\n </b>\n attribute to specify a relationship between the output element and other elements in the document that affected the calculation (for example, as inputs or parameters). The value of the for attribute is a space-separated list of IDs of other elements.\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/p59YNK\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;script type = \"text/javascript\"&gt;\n         \n         function showResult() {\n            x = document.forms[\"myform\"][\"newinput\"].value;\n            document.forms[\"myform\"][\"result\"].value = x;\n         }\n      &lt;/script&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n\n      &lt;form action = \"/cgi-bin/html5.cgi\" method = \"get\" name = \"myform\"&gt;\n         Enter a value : &lt;input type = \"text\" name = \"newinput\" /&gt;\n         &lt;input type = \"button\" value = \"Result\"  onclick = \"showResult();\" /&gt;\n         &lt;output name = \"result\"&gt;&lt;/output&gt;\n      &lt;/form&gt;\n\t\t\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n It will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/output_element.htm\" width=\"600px\">\n</iframe>\n"
                },
                {
                    "title": "The placeholder attribute",
                    "html": "<p>\n HTML5 introduced a new attribute called\n <b>\n  placeholder\n </b>\n . This attribute on &lt;input&gt; and &lt;textarea&gt; elements provide a hint to the user of what can be entered in the field. The placeholder text must not contain carriage returns or line-feeds.\n</p>\n<p>\n Here is the simple syntax for placeholder attribute −\n</p>\n<pre class=\"result notranslate\">\n&lt;input type = \"text\" name = \"search\" placeholder = \"search the web\"/&gt;\n</pre>\n<p>\n This attribute is supported by latest versions of Mozilla, Safari and Crome browsers only.\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/IfCb48\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;body&gt;\n\n      &lt;form action = \"/cgi-bin/html5.cgi\" method = \"get\"&gt;\n         Enter email : &lt;input type = \"email\" name = \"newinput\" \n            placeholder = \"email@example.com\"/&gt;\n         &lt;input type = \"submit\" value = \"submit\" /&gt;\n      &lt;/form&gt;\n\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/placeholder_attribute.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "The autofocus attribute",
                    "html": "<p>\n This is a simple one-step pattern, easily programmed in JavaScript at the time of document load, automatically focus one particular form field.\n</p>\n<p>\n HTML5 introduced a new attribute called\n <b>\n  autofocus\n </b>\n which would be used as follows −\n</p>\n<pre class=\"result notranslate\">\n&lt;input type = \"text\" name = \"search\" autofocus/&gt;\n</pre>\n<p>\n This attribute is supported by latest versions of Mozilla, Safari and Chrome browsers only.\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;body&gt;\n   \n      &lt;form action = \"/cgi-bin/html5.cgi\" method = \"get\"&gt;\n         Enter email : &lt;input type = \"text\" name = \"newinput\" autofocus/&gt;\n         &lt;p&gt;Try to submit using Submit button&lt;/p&gt;\n         &lt;input type = \"submit\" value = \"submit\" /&gt;\n      &lt;/form&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n"
                },
                {
                    "title": "The required attribute",
                    "html": "<p>\n Now you do not need to have JavaScript for client-side validations like empty text box would never be submitted because HTML5 introduced a new attribute called\n <b>\n  required\n </b>\n which would be used as follows and would insist to have a value −\n</p>\n<pre class=\"result notranslate\">\n&lt;input type = \"text\" name = \"search\" required/&gt;\n</pre>\n<p>\n This attribute is supported by latest versions of Mozilla, Safari and Chrome browsers only.\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/EeqaE4\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;body&gt;\n   \n      &lt;form action = \"/cgi-bin/html5.cgi\" method = \"get\"&gt;\n         Enter email : &lt;input type = \"text\" name = \"newinput\" required/&gt;\n         &lt;p&gt;Try to submit using Submit button&lt;/p&gt;\n         &lt;input type = \"submit\" value = \"submit\" /&gt;\n      &lt;/form&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n It will produce the following result −\n</p>\n<iframe class=\"result\" height=\"130px\" onload=\"resizeFrame(this)\" src=\"/html5/src/required_attribute.htm\" width=\"600px\">\n</iframe>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_events.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_svg.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "SVG",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>SVG stands for <b>S</b>calable <b>V</b>ector <b>G</b>raphics and it is a language for describing 2D-graphics and graphical applications in XML and the XML is then rendered by an SVG viewer.</p>\n<p>SVG is mostly useful for vector type diagrams like Pie charts, Two-dimensional graphs in an X,Y coordinate system etc.</p>\n<p>SVG became a W3C Recommendation 14. January 2003 and you can check latest version of SVG specification at <a href=\"https://www.w3.org/TR/SVG/\" rel=\"nofollow\" target=\"_blank\" title=\"SVG\">SVG Specification</a>.</p>\n"
                },
                {
                    "title": "Viewing SVG Files",
                    "html": "<p>\n Most of the web browsers can display SVG just like they can display PNG, GIF, and JPG. Internet Explorer users may have to install the\n <a href=\"https://www.adobe.com/svg/viewer/install/\" rel=\"nofollow\" target=\"_blank\">\n  Adobe SVG Viewer\n </a>\n to be able to view SVG in the browser.\n</p>\n"
                },
                {
                    "title": "Embedding SVG in HTML5",
                    "html": "<p>\n HTML5 allows embedding SVG directly using\n <b>\n  &lt;svg&gt;...&lt;/svg&gt;\n </b>\n tag which has following simple syntax −\n</p>\n<pre class=\"result notranslate\">\n&lt;svg xmlns = \"http://www.w3.org/2000/svg\"&gt;\n   ...    \n&lt;/svg&gt;\n</pre>\n<p>\n Firefox 3.7 has also introduced a configuration option (\"about:config\") where you can enable HTML5 using the following steps −\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   Type\n   <b>\n    about:config\n   </b>\n   in your Firefox address bar.\n  </p>\n </li>\n <li>\n  <p>\n   Click the \"I'll be careful, I promise!\" button on the warning message that appears (and make sure you adhere to it!).\n  </p>\n </li>\n <li>\n  <p>\n   Type\n   <b>\n    html5.enable\n   </b>\n   into the filter bar at the top of the page.\n  </p>\n </li>\n <li>\n  <p>\n   Currently it would be disabled, so click it to toggle the value to true.\n  </p>\n </li>\n</ul>\n<p>\n Now your Firefox HTML5 parser should be enabled and you should be able to experiment with the following examples.\n</p>\n"
                },
                {
                    "title": "HTML5 − SVG Circle",
                    "html": "<p>\n Following is the HTML5 version of an SVG example which would draw a circle using &lt;circle&gt; tag −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/7DX1Da\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n   \n      &lt;style&gt;\n         #svgelem {\n            position: relative;\n            left: 50%;\n            -webkit-transform: translateX(-20%);\n            -ms-transform: translateX(-20%);\n            transform: translateX(-20%);\n         }\n      &lt;/style&gt;\n      &lt;title&gt;SVG&lt;/title&gt;\n      &lt;meta charset = \"utf-8\" /&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;h2 align = \"center\"&gt;HTML5 SVG Circle&lt;/h2&gt;\n\t\t\n      &lt;svg id = \"svgelem\" height = \"200\" xmlns = \"http://www.w3.org/2000/svg\"&gt;\n         &lt;circle id = \"redcircle\" cx = \"50\" cy = \"50\" r = \"50\" fill = \"red\" /&gt;\n      &lt;/svg&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This would produce the following result in HTML5 enabled latest version of Firefox.\n</p>\n<iframe class=\"result\" height=\"200px\" onload=\"resizeFrame(this)\" src=\"/html5/src/circle.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "HTML5 − SVG Rectangle",
                    "html": "<p>\n Following is the HTML5 version of an SVG example which would draw a rectangle using &lt;rect&gt; tag −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/hALc01\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n   \n      &lt;style&gt;\n         #svgelem {\n            position: relative;\n            left: 50%;\n            -webkit-transform: translateX(-50%);\n            -ms-transform: translateX(-50%);\n            transform: translateX(-50%);\n         }\n      &lt;/style&gt;\n      &lt;title&gt;SVG&lt;/title&gt;\n      &lt;meta charset = \"utf-8\" /&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;h2 align = \"center\"&gt;HTML5 SVG Rectangle&lt;/h2&gt;\n      \n      &lt;svg id = \"svgelem\" height = \"200\" xmlns = \"http://www.w3.org/2000/svg\"&gt;\n         &lt;rect id = \"redrect\" width = \"300\" height = \"100\" fill = \"red\" /&gt;\n      &lt;/svg&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This would produce the following result in HTML5 enabled latest version of Firefox.\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/rectangle.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "HTML5 − SVG Line",
                    "html": "<p>\n Following is the HTML5 version of an SVG example which would draw a line using &lt;line&gt; tag −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/UXmvhs\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      \n      &lt;style&gt;\n         #svgelem {\n            position: relative;\n            left: 50%;\n            -webkit-transform: translateX(-50%);\n            -ms-transform: translateX(-50%);\n            transform: translateX(-50%);\n         }\n      &lt;/style&gt;\n      &lt;title&gt;SVG&lt;/title&gt;\n      &lt;meta charset = \"utf-8\" /&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;h2 align = \"center\"&gt;HTML5 SVG Line&lt;/h2&gt;\n      \n      &lt;svg id = \"svgelem\" height = \"200\" xmlns = \"http://www.w3.org/2000/svg\"&gt;\n         &lt;line x1 = \"0\" y1 = \"0\" x2 = \"200\" y2 = \"100\" \n            style = \"stroke:red;stroke-width:2\"/&gt;\n      &lt;/svg&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n You can use the\n <b>\n  style\n </b>\n attribute which allows you to set additional style information like stroke and fill colors, width of the stroke, etc.\n</p>\n<p>\n This would produce the following result in HTML5 enabled latest version of Firefox.\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/line.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "HTML5 − SVG Ellipse",
                    "html": "<p>\n Following is the HTML5 version of an SVG example which would draw an ellipse using &lt;ellipse&gt; tag −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/ASkRFm\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      \n      &lt;style&gt;\n         #svgelem {\n            position: relative;\n            left: 50%;\n            -webkit-transform: translateX(-40%);\n            -ms-transform: translateX(-40%);\n            transform: translateX(-40%);\n         }\n      &lt;/style&gt;\n      &lt;title&gt;SVG&lt;/title&gt;\n      &lt;meta charset = \"utf-8\" /&gt;\n   &lt;/head&gt;\n\t\n   &lt;body&gt;\n      &lt;h2 align = \"center\"&gt;HTML5 SVG Ellipse&lt;/h2&gt;\n      \n      &lt;svg id = \"svgelem\" height = \"200\" xmlns = \"http://www.w3.org/2000/svg\"&gt;\n         &lt;ellipse cx = \"100\" cy = \"50\" rx = \"100\" ry = \"50\" fill = \"red\" /&gt;\n      &lt;/svg&gt;\n\t\t\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This would produce the following result in HTML5 enabled latest version of Firefox.\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/ecllipse.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "HTML5 − SVG Polygon",
                    "html": "<p>\n Following is the HTML5 version of an SVG example which would draw a polygon using &lt;polygon&gt; tag −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/81ywpt\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n   \n      &lt;style&gt;\n         #svgelem {\n            position: relative;\n            left: 50%;\n            -webkit-transform: translateX(-50%);\n            -ms-transform: translateX(-50%);\n            transform: translateX(-50%);\n         }\n      &lt;/style&gt;\n      &lt;title&gt;SVG&lt;/title&gt;\n      &lt;meta charset = \"utf-8\" /&gt;\n   &lt;/head&gt;\n\t\n   &lt;body&gt;\n      &lt;h2 align = \"center\"&gt;HTML5 SVG Polygon&lt;/h2&gt;\n      \n      &lt;svg id = \"svgelem\" height = \"200\" xmlns = \"http://www.w3.org/2000/svg\"&gt;\n         &lt;polygon  points = \"20,10 300,20, 170,50\" fill = \"red\" /&gt;\n      &lt;/svg&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This would produce the following result in HTML5 enabled latest version of Firefox.\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/polygon.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "HTML5 − SVG Polyline",
                    "html": "<p>\n Following is the HTML5 version of an SVG example which would draw a polyline using &lt;polyline&gt; tag −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/x7B6Bc\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      \n      &lt;style&gt;\n         #svgelem {\n            position: relative;\n            left: 50%;\n            -webkit-transform: translateX(-20%);\n            -ms-transform: translateX(-20%);\n            transform: translateX(-20%);\n         }\n      &lt;/style&gt;\n      &lt;title&gt;SVG&lt;/title&gt;\n      &lt;meta charset = \"utf-8\" /&gt;\n   &lt;/head&gt;\n\t\n   &lt;body&gt;\n      &lt;h2 align = \"center\"&gt;HTML5 SVG Polyline&lt;/h2&gt;\n      &lt;svg id = \"svgelem\" height = \"200\" xmlns = \"http://www.w3.org/2000/svg\"&gt;\n         &lt;polyline points = \"0,0 0,20 20,20 20,40 40,40 40,60\" fill = \"red\" /&gt;\n      &lt;/svg&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This would produce the following result in HTML5 enabled latest version of Firefox.\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/polyline.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "HTML5 − SVG Gradients",
                    "html": "<p>\n Following is the HTML5 version of an SVG example which would draw an ellipse using &lt;ellipse&gt; tag and would use &lt;radialGradient&gt; tag to define an SVG radial gradient.\n</p>\n<p>\n Similarly, you can use &lt;linearGradient&gt; tag to create SVG linear gradient.\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/deLBsZ\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      \n      &lt;style&gt;\n         #svgelem {\n            position: relative;\n            left: 50%;\n            -webkit-transform: translateX(-40%);\n            -ms-transform: translateX(-40%);\n            transform: translateX(-40%);\n         }\n      &lt;/style&gt;\n      &lt;title&gt;SVG&lt;/title&gt;\n      &lt;meta charset = \"utf-8\" /&gt;\n   &lt;/head&gt;\n\t\n   &lt;body&gt;\n      &lt;h2 align = \"center\"&gt;HTML5 SVG Gradient Ellipse&lt;/h2&gt;\n      \n      &lt;svg id = \"svgelem\" height = \"200\" xmlns = \"http://www.w3.org/2000/svg\"&gt;\n         &lt;defs&gt;\n            &lt;radialGradient id=\"gradient\" cx = \"50%\" cy = \"50%\" r = \"50%\" fx = \"50%\" \n               fy = \"50%\"&gt;\n               &lt;stop offset = \"0%\" style = \"stop-color:rgb(200,200,200); stop-opacity:0\"/&gt;\n               &lt;stop offset = \"100%\" style = \"stop-color:rgb(0,0,255); stop-opacity:1\"/&gt;\n            &lt;/radialGradient&gt;\n         &lt;/defs&gt;\n         &lt;ellipse cx = \"100\" cy = \"50\" rx = \"100\" ry = \"50\" \n            style = \"fill:url(#gradient)\" /&gt;\n      &lt;/svg&gt;\n\t\t\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This would produce the following result in HTML5 enabled latest version of Firefox.\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/geadients.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "HTML5 − SVG Star",
                    "html": "<p>\n Following is the HTML5 version of an SVG example which would draw a star using &lt;polygon&gt; tag.\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/PNpOzA\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n   &lt;head&gt;\n   \n      &lt;style&gt;\n         #svgelem {\n            position: relative;\n            left: 50%;\n            -webkit-transform: translateX(-40%);\n            -ms-transform: translateX(-40%);\n            transform: translateX(-40%);\n         }\n      &lt;/style&gt;\n      &lt;title&gt;SVG&lt;/title&gt;\n      &lt;meta charset = \"utf-8\" /&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\t\n      &lt;h2 align = \"center\"&gt;HTML5 SVG Star&lt;/h2&gt;\n      \n      &lt;svg id = \"svgelem\" height = \"200\" xmlns = \"http://www.w3.org/2000/svg\"&gt;\n         &lt;polygon points = \"100,10 40,180 190,60 10,60 160,180\" fill = \"red\"/&gt;\n      &lt;/svg&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This would produce the following result in HTML5 enabled latest version of Firefox.\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/star.htm\" width=\"660px\">\n</iframe>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_web_forms2.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_mathml.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "MathML",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>The HTML syntax of HTML5 allows for MathML elements to be used inside a document using &lt;math&gt;...&lt;/math&gt; tags.</p>\n<p>Most of the web browsers can display MathML tags. If your browser does not support MathML, then I would suggest you to use latest version of Firefox.</p>\n"
                },
                {
                    "title": "MathML Examples",
                    "html": "<p>\n Following is a valid HTML5 document with MathML −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/iSIuXD\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!doctype html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;meta charset = \"UTF-8\"&gt;\n      &lt;title&gt;Pythagorean theorem&lt;/title&gt;\n   &lt;/head&gt;\n\t\n   &lt;body&gt;\n      &lt;math xmlns = \"http://www.w3.org/1998/Math/MathML\"&gt;\n\t\t\n         &lt;mrow&gt;\n            &lt;msup&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;\n            &lt;mo&gt;+&lt;/mo&gt;\n\t\t\t\t\n            &lt;msup&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;\n            &lt;mo&gt; = &lt;/mo&gt;\n\t\t\t\t\n            &lt;msup&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;\n         &lt;/mrow&gt;\n\t\t\t\n      &lt;/math&gt;\n   &lt;/body&gt;\n&lt;/html&gt; \n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/mathml_examples.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "Using MathML Characters",
                    "html": "<p>\n Consider, following is the markup which makes use of the characters &amp;InvisibleTimes; −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/kSe24N\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!doctype html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;meta charset = \"UTF-8\"&gt;\n      &lt;title&gt;MathML Examples&lt;/title&gt;\n   &lt;/head&gt;\n\t\n   &lt;body&gt;\n      &lt;math xmlns = \"http://www.w3.org/1998/Math/MathML\"&gt;\n\t\t\n         &lt;mrow&gt;\t\t\t\n            &lt;mrow&gt;\n\t\t\t\t\n               &lt;msup&gt;\n                  &lt;mi&gt;x&lt;/mi&gt;\n                  &lt;mn&gt;2&lt;/mn&gt;\n               &lt;/msup&gt;\n\t\t\t\t\t\n               &lt;mo&gt;+&lt;/mo&gt;\n\t\t\t\t\t\n               &lt;mrow&gt;\n                  &lt;mn&gt;4&lt;/mn&gt;\n                  &lt;mo&gt;&amp;InvisibleTimes;&lt;/mo&gt;\n                  &lt;mi&gt;x&lt;/mi&gt;\n               &lt;/mrow&gt;\n\t\t\t\t\t\n               &lt;mo&gt;+&lt;/mo&gt;\n               &lt;mn&gt;4&lt;/mn&gt;\n\t\t\t\t\t\n            &lt;/mrow&gt;\n\t\t\t\t\n            &lt;mo&gt;=&lt;/mo&gt;\n            &lt;mn&gt;0&lt;/mn&gt;\n\t\t\t\t \n         &lt;/mrow&gt;\n      &lt;/math&gt;\n   &lt;/body&gt;\n&lt;/html&gt; \n</pre>\n<p>\n This would produce the following result. If you are not able to see proper result like x\n <sup>\n  2\n </sup>\n + 4x + 4 = 0, then use Firefox 3.5 or higher version.\n</p>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/mathml_characters.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "Matrix Presentation Examples",
                    "html": "<p>\n Consider the following example which would be used to represent a simple 2x2 matrix −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/d6bfFI\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!doctype html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;meta charset = \"UTF-8\"&gt;\n      &lt;title&gt;MathML Examples&lt;/title&gt;\n   &lt;/head&gt;\n\t\n   &lt;body&gt;\n      &lt;math xmlns = \"http://www.w3.org/1998/Math/MathML\"&gt;\n\t\t\n         &lt;mrow&gt;\n            &lt;mi&gt;A&lt;/mi&gt;\n            &lt;mo&gt;=&lt;/mo&gt;\n\t\t\t\n            &lt;mfenced open = \"[\" close=\"]\"&gt;\n\t\t\t\n               &lt;mtable&gt;\n                  &lt;mtr&gt;\n                     &lt;mtd&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mtd&gt;\n                     &lt;mtd&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;/mtd&gt;\n                  &lt;/mtr&gt;\n\t\t\t\t\t\n                  &lt;mtr&gt;\n                     &lt;mtd&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;/mtd&gt;\n                     &lt;mtd&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;/mtd&gt;\n                  &lt;/mtr&gt;\n               &lt;/mtable&gt;\n               \n            &lt;/mfenced&gt;\n         &lt;/mrow&gt;\n      &lt;/math&gt;\n\n   &lt;/body&gt;\n&lt;/html&gt; \n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/matrix_presentation_example.htm\" width=\"660px\">\n</iframe>\n<p>\n This would produce the following result. If you are not able to see proper result, then use Firefox 3.5 or higher version.\n</p>\n<img alt=\"MathML\" src=\"/html5/images/mathml2.jpg\"/>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_svg.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_web_storage.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Web Storage",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>HTML5 introduces two mechanisms, similar to HTTP session cookies, for storing structured data on the client side and to overcome following drawbacks.</p>\n<ul class=\"list\">\n<li><p>Cookies are included with every HTTP request, thereby slowing down your web application by transmitting the same data.</p></li>\n<li><p>Cookies are included with every HTTP request, thereby sending data unencrypted over the internet.</p></li>\n<li><p>Cookies are limited to about 4 KB of data. Not enough to store required data.</p></li>\n</ul>\n<p>The two storages are <b>session storage</b> and <b>local storage</b> and they would be used to handle different situations.</p>\n<p>The latest versions of pretty much every browser supports HTML5 Storage including Internet Explorer.</p>\n"
                },
                {
                    "title": "Session Storage",
                    "html": "<p>\n The\n <i>\n  Session Storage\n </i>\n is designed for scenarios where the user is carrying out a single transaction, but could be carrying out multiple transactions in different windows at the same time.\n</p>\n<h3>\n Example\n</h3>\n<p>\n <i>\n  For example, if a user buying plane tickets in two different windows, using the same site. If the site used cookies to keep track of which ticket the user was buying, then as the user clicked from page to page in both windows, the ticket currently being purchased would \"leak\" from one window to the other, potentially causing the user to buy two tickets for the same flight without really noticing.\n </i>\n</p>\n<p>\n HTML5 introduces the\n <i>\n  sessionStorage\n </i>\n attribute which would be used by the sites to add data to the session storage, and it will be accessible to any page from the same site opened in that window, i.e.,\n <b>\n  session\n </b>\n and as soon as you close the window, the session would be lost.\n</p>\n<p>\n Following is the code which would set a session variable and access that variable −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/4rYmLB\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;body&gt;\n      &lt;script type = \"text/javascript\"&gt;\n         \n         if( sessionStorage.hits ) {\n            sessionStorage.hits = Number(sessionStorage.hits) +1;\n         } else {\n            sessionStorage.hits = 1;\n         }\n         document.write(\"Total Hits :\" + sessionStorage.hits );\n      &lt;/script&gt;\n\t\n      &lt;p&gt;Refresh the page to increase number of hits.&lt;/p&gt;\n      &lt;p&gt;Close the window and open it again and check the result.&lt;/p&gt;\n\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"130px\" onload=\"resizeFrame(this)\" src=\"/html5/src/session_storage.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "Local Storage",
                    "html": "<p>\n The\n <i>\n  Local Storage\n </i>\n is designed for storage that spans multiple windows, and lasts beyond the current session. In particular, Web applications may wish to store megabytes of user data, such as entire user-authored documents or a user's mailbox, on the client side for performance reasons.\n</p>\n<p>\n Again, cookies do not handle this case well, because they are transmitted with every request.\n</p>\n<h3>\n Example\n</h3>\n<p>\n HTML5 introduces the\n <i>\n  localStorage\n </i>\n attribute which would be used to access a page's local storage area without no time limit and this local storage will be available whenever you would use that page.\n</p>\n<p>\n Following is the code which would set a local storage variable and access that variable every time this page is accessed, even next time, when you open the window −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/Xciy2D\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;body&gt;\n      &lt;script type = \"text/javascript\"&gt;\n         \n         if( localStorage.hits ) {\n            localStorage.hits = Number(localStorage.hits) +1;\n         } else {\n            localStorage.hits = 1;\n         }\n         document.write(\"Total Hits :\" + localStorage.hits );\n      &lt;/script&gt;\n\t\t\n      &lt;p&gt;Refresh the page to increase number of hits.&lt;/p&gt;\n      &lt;p&gt;Close the window and open it again and check the result.&lt;/p&gt;\n\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"130px\" onload=\"resizeFrame(this)\" src=\"/html5/src/local_storage.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "Delete Web Storage",
                    "html": "<p>\n Storing sensitive data on local machine could be dangerous and could leave a security hole.\n</p>\n<p>\n The\n <i>\n  Session Storage Data\n </i>\n would be deleted by the browsers immediately after the session gets terminated.\n</p>\n<p>\n To clear a local storage setting you would need to call\n <b>\n  localStorage.remove('key')\n </b>\n ; where 'key' is the key of the value you want to remove. If you want to clear all settings, you need to call\n <b>\n  localStorage.clear()\n </b>\n method.\n</p>\n<p>\n Following is the code which would clear complete local storage −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/dGhyzX\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;body&gt;\n\n      &lt;script type = \"text/javascript\"&gt;\n         localStorage.clear();\n\n         // Reset number of hits.\n         if( localStorage.hits ) {\n            localStorage.hits = Number(localStorage.hits) +1;\n         } else {\n            localStorage.hits = 1;\n         }\n         document.write(\"Total Hits :\" + localStorage.hits );\n\t\t\t\n      &lt;/script&gt;\n\t\t\n      &lt;p&gt;Refreshing the page would not to increase hit counter.&lt;/p&gt;\n      &lt;p&gt;Close the window and open it again and check the result.&lt;/p&gt;\n\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce following result −\n</p>\n<iframe class=\"result\" height=\"130px\" onload=\"resizeFrame(this)\" src=\"/html5/src/delete_web_storage.htm\" width=\"660px\">\n</iframe>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_mathml.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_web_sql.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Web SQL Database",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>The Web SQL Database API isn't actually part of the HTML5 specification but it is a separate specification which introduces a set of APIs to manipulate client-side databases using SQL.</p>\n<p>I'm assuming you are a great web developer and if that is the case then no doubt, you would be well aware of SQL and RDBMS concepts. If you still want to have a session with SQL then, you can go through our <a href=\"/sql/index.htm\" target=\"_blank\">SQL Tutorial</a>.</p>\n<p>Web SQL Database will work in latest version of Safari, Chrome and Opera.</p>\n"
                },
                {
                    "title": "The Core Methods",
                    "html": "<p>\n There are following three core methods defined in the spec that I am going to cover in this tutorial −\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   <b>\n    openDatabase\n   </b>\n   − This method creates the database object either using existing database or creating new one.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    transaction\n   </b>\n   − This method gives us the ability to control a transaction and performing either commit or rollback based on the situation.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    executeSql\n   </b>\n   − This method is used to execute actual SQL query.\n  </p>\n </li>\n</ul>\n"
                },
                {
                    "title": "Opening Database",
                    "html": "<p>\n The\n <i>\n  openDatabase\n </i>\n method takes care of opening a database if it already exists, this method will create it if it already does not exist.\n</p>\n<p>\n To create and open a database, use the following code −\n</p>\n<pre class=\"result notranslate\">\nvar db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);\n</pre>\n<p>\n The above method took the following five parameters −\n</p>\n<ul class=\"list\">\n <li>\n  Database name\n </li>\n <li>\n  Version number\n </li>\n <li>\n  Text description\n </li>\n <li>\n  Size of database\n </li>\n <li>\n  Creation callback\n </li>\n</ul>\n<p>\n The last and 5th argument, creation callback will be called if the database is being created. Without this feature, however, the databases are still being created on the fly and correctly versioned.\n</p>\n"
                },
                {
                    "title": "Executing queries",
                    "html": "<p>\n To execute a query you use the database.transaction() function. This function needs a single argument, which is a function that takes care of actually executing the query as follows −\n</p>\n<pre class=\"prettyprint notranslate\">\nvar db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024); \n\ndb.transaction(function (tx) {   \n   tx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)'); \n});\n</pre>\n<p>\n The above query will create a table called LOGS in 'mydb' database.\n</p>\n"
                },
                {
                    "title": "INSERT Operation",
                    "html": "<p>\n To create enteries into the table we add simple SQL query in the above example as follows −\n</p>\n<pre class=\"prettyprint notranslate\">\nvar db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024); \n\ndb.transaction(function (tx) { \n   tx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)'); \n   tx.executeSql('INSERT INTO LOGS (id, log) VALUES (1, \"foobar\")'); \n   tx.executeSql('INSERT INTO LOGS (id, log) VALUES (2, \"logmsg\")'); \n}); \n</pre>\n<p>\n We can pass dynamic values while creating entering as follows −\n</p>\n<pre class=\"prettyprint notranslate\">\nvar db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);  \n\ndb.transaction(function (tx) {   \n   tx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)'); \n   tx.executeSql('INSERT INTO LOGS (id,log) VALUES (?, ?'), [e_id, e_log]; \n});\n</pre>\n<p>\n Here\n <b>\n  e_id\n </b>\n and\n <b>\n  e_log\n </b>\n are external variables, and executeSql maps each item in the array argument to the \"?\"s.\n</p>\n"
                },
                {
                    "title": "READ Operation",
                    "html": "<p>\n To read already existing records we use a callback to capture the results as follows −\n</p>\n<pre class=\"prettyprint notranslate\">\nvar db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);  \n\ndb.transaction(function (tx) { \n   tx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)');\n   tx.executeSql('INSERT INTO LOGS (id, log) VALUES (1, \"foobar\")'); \n   tx.executeSql('INSERT INTO LOGS (id, log) VALUES (2, \"logmsg\")'); \n});  \n\ndb.transaction(function (tx) { \n   tx.executeSql('SELECT * FROM LOGS', [], function (tx, results) { \n      var len = results.rows.length, i; \n      msg = \"&lt;p&gt;Found rows: \" + len + \"&lt;/p&gt;\"; \n      document.querySelector('#status').innerHTML +=  msg; \n  \n      for (i = 0; i &lt; len; i++) { \n         alert(results.rows.item(i).log ); \n      } \n  \n   }, null); \n});\n</pre>\n"
                },
                {
                    "title": "Final Example",
                    "html": "<p>\n So finally, let us keep this example in a full-fledged HTML5 document as follows and try to run it with Safari browser.\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/rMAhs5\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt; \n\n&lt;html&gt;  \n   &lt;head&gt; \n  \n      &lt;script type = \"text/javascript\"&gt; \n         var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024); \n         var msg; \n    \n         db.transaction(function (tx) { \n            tx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)'); \n            tx.executeSql('INSERT INTO LOGS (id, log) VALUES (1, \"foobar\")'); \n            tx.executeSql('INSERT INTO LOGS (id, log) VALUES (2, \"logmsg\")'); \n            msg = '&lt;p&gt;Log message created and row inserted.&lt;/p&gt;'; \n            document.querySelector('#status').innerHTML =  msg; \n         })\n\n         db.transaction(function (tx) { \n            tx.executeSql('SELECT * FROM LOGS', [], function (tx, results) { \n               var len = results.rows.length, i; \n               msg = \"&lt;p&gt;Found rows: \" + len + \"&lt;/p&gt;\"; \n               document.querySelector('#status').innerHTML +=  msg; \n      \n               for (i = 0; i &lt; len; i++) { \n                  msg = \"&lt;p&gt;&lt;b&gt;\" + results.rows.item(i).log + \"&lt;/b&gt;&lt;/p&gt;\"; \n                  document.querySelector('#status').innerHTML +=  msg; \n               } \n            }, null); \n         }); \n      &lt;/script&gt; \n   &lt;/head&gt; \n  \n   &lt;body&gt; \n      &lt;div id = \"status\" name = \"status\"&gt;Status Message&lt;/div&gt; \n   &lt;/body&gt; \n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"200px\" src=\"/html5/src/web_sql.htm\" width=\"600px\">\n</iframe>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_web_storage.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_server_sent_events.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Server-Sent Events",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>Conventional web applications generate events which are dispatched to the web server. For example, a simple click on a link requests a new page from the server.</p>\n<p>The type of events which are flowing from web browser to the web server may be called client-sent events.</p>\n<p>Along with HTML5, <a href=\"https://www.whatwg.org/\" rel=\"nofollow\" target=\"_blank\">WHATWG</a> Web Applications 1.0 introduces events which flow from web server to the web browsers and they are called Server-Sent Events (SSE). Using SSE you can push DOM events continuously from your web server to the visitor's browser.</p>\n<p>The event streaming approach opens a persistent connection to the server, sending data to the client when new information is available, eliminating the need for continuous polling.</p>\n<p>Server-sent events standardize how we stream data from the server to the client.</p>\n"
                },
                {
                    "title": "Web Application for SSE",
                    "html": "<p>\n To use Server-Sent Events in a web application, you would need to add an &lt;eventsource&gt; element to the document.\n</p>\n<p>\n The\n <b>\n  src\n </b>\n attribute of &lt;eventsource&gt; element should point to an URL which should provide a persistent HTTP connection that sends a data stream containing the events.\n</p>\n<p>\n The URL would point to a PHP, PERL or any Python script which would take care of sending event data consistently. Following is a simple example of web application which would expect server time.\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n   \n      &lt;script type = \"text/javascript\"&gt;\n         /* Define event handling logic here */\n      &lt;/script&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;div id = \"sse\"&gt;\n         &lt;eventsource src = \"/cgi-bin/ticker.cgi\" /&gt;\n      &lt;/div&gt;\n\t\t\n      &lt;div id = \"ticker\"&gt;\n         &lt;TIME&gt;\n      &lt;/div&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n"
                },
                {
                    "title": "Server Side Script for SSE",
                    "html": "<p>\n A server side script should send\n <b>\n  Content-type\n </b>\n header specifying the type\n <i>\n  text/event-stream\n </i>\n as follows.\n</p>\n<pre class=\"result notranslate\">\nprint \"Content-Type: text/event-stream\\n\\n\";\n</pre>\n<p>\n After setting Content-Type, server side script would send an\n <b>\n  Event\n </b>\n : tag followed by event name. Following example would send Server-Time as event name terminated by a new line character.\n</p>\n<pre class=\"result notranslate\">\nprint \"Event: server-time\\n\";\n</pre>\n<p>\n Final step is to send event data using\n <b>\n  Data\n </b>\n : tag which would be followed by integer of string value terminated by a new line character as follows −\n</p>\n<pre class=\"result notranslate\">\n$time = localtime();\nprint \"Data: $time\\n\";\n</pre>\n<p>\n Finally, following is complete ticker.cgi written in Perl −\n</p>\n<pre class=\"prettyprint notranslate\">\n#!/usr/bin/perl  \nprint \"Content-Type: text/event-stream\\n\\n\";  \n\nwhile(true) { \n   print \"Event: server-time\\n\"; \n   $time = localtime(); \n   print \"Data: $time\\n\"; \n   sleep(5); \n} \n</pre>\n"
                },
                {
                    "title": "Handle Server-Sent Events",
                    "html": "<p>\n Let us modify our web application to handle server-sent events. Following is the final example.\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt; \n\n&lt;html&gt;  \n   &lt;head&gt; \n  \n      &lt;script type = \"text/javascript\"&gt; \n         document.getElementsByTagName(\"eventsource\")[0].addEventListener(\"server-time\", \n         eventHandler, false); \n    \n         function eventHandler(event) { \n\n            // Alert time sent by the server \n            document.querySelector('#ticker').innerHTML = event.data; \n         } \n      &lt;/script&gt; \n   &lt;/head&gt; \n  \n   &lt;body&gt; \n      &lt;div id = \"sse\"&gt; \n         &lt;eventsource src = \"/cgi-bin/ticker.cgi\" /&gt; \n      &lt;/div&gt; \n   \n      &lt;div id = \"ticker\" name = \"ticker\"&gt; \n         [TIME] \n      &lt;/div&gt; \n   &lt;/body&gt; \n&lt;/html&gt;\n</pre>\n<p>\n Before testing Server-Sent events, I would suggest that you make sure your web browser supports this concept.\n</p>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_web_sql.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_websocket.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "WebSocket",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>WebSockets is a next-generation bidirectional communication technology for web applications which operates over a single socket and is exposed via a JavaScript interface in HTML 5 compliant browsers.</p>\n<p>Once you get a Web Socket connection with the web server, you can send data from browser to server by calling a <b>send()</b> method, and receive data from server to browser by an <b>onmessage</b> event handler.</p>\n<p>Following is the API which creates a new WebSocket object.</p>\n<pre class=\"result notranslate\">\nvar Socket = new WebSocket(url, [protocal] );\n</pre>\n<p>Here first argument, url, specifies the URL to which to connect. The second attribute, protocol is optional, and if present, specifies a sub-protocol that the server must support for the connection to be successful.</p>\n"
                },
                {
                    "title": "WebSocket Attributes",
                    "html": "<p>\n Following are the attribute of WebSocket object. Assuming we created Socket object as mentioned above −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Attribute &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     Socket.readyState\n    </b>\n   </p>\n   <p>\n    The readonly attribute readyState represents the state of the connection. It can have the following values −\n   </p>\n   <ul class=\"list\">\n    <li>\n     <p>\n      A value of 0 indicates that the connection has not yet been established.\n     </p>\n    </li>\n    <li>\n     <p>\n      A value of 1 indicates that the connection is established and communication is possible.\n     </p>\n    </li>\n    <li>\n     <p>\n      A value of 2 indicates that the connection is going through the closing handshake.\n     </p>\n    </li>\n    <li>\n     <p>\n      A value of 3 indicates that the connection has been closed or could not be opened.\n     </p>\n    </li>\n   </ul>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     Socket.bufferedAmount\n    </b>\n   </p>\n   <p>\n    The readonly attribute bufferedAmount represents the number of bytes of UTF-8 text that have been queued using send() method.\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "WebSocket Events",
                    "html": "<p>\n Following are the events associated with WebSocket object. Assuming we created Socket object as mentioned above −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th class=\"ts\">\n   Event\n  </th>\n  <th class=\"ts\">\n   Event Handler\n  </th>\n  <th class=\"ts\">\n   Description\n  </th>\n </tr>\n <tr>\n  <td>\n   open\n  </td>\n  <td>\n   Socket.onopen\n  </td>\n  <td>\n   This event occurs when socket connection is established.\n  </td>\n </tr>\n <tr>\n  <td>\n   message\n  </td>\n  <td>\n   Socket.onmessage\n  </td>\n  <td>\n   This event occurs when client receives data from server.\n  </td>\n </tr>\n <tr>\n  <td>\n   error\n  </td>\n  <td>\n   Socket.onerror\n  </td>\n  <td>\n   This event occurs when there is any error in communication.\n  </td>\n </tr>\n <tr>\n  <td>\n   close\n  </td>\n  <td>\n   Socket.onclose\n  </td>\n  <td>\n   This event occurs when connection is closed.\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "WebSocket Methods",
                    "html": "<p>\n Following are the methods associated with WebSocket object. Assuming we created Socket object as mentioned above −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;vertical-align:middle\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;vertical-align:middle\">\n   Method &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     Socket.send()\n    </b>\n   </p>\n   <p>\n    The send(data) method transmits data using the connection.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     Socket.close()\n    </b>\n   </p>\n   <p>\n    The close() method would be used to terminate any existing connection.\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "WebSocket Example",
                    "html": "<p>\n A WebSocket is a standard bidirectional TCP socket between the client and the server. The socket starts out as a HTTP connection and then \"Upgrades\" to a TCP socket after a HTTP handshake. After the handshake, either side can send data.\n</p>\n"
                },
                {
                    "title": "Client Side HTML & JavaScript Code",
                    "html": "<p>\n At the time of writing this tutorial, there are only few web browsers supporting WebSocket() interface. You can try following example with latest version of Chrome, Mozilla, Opera and Safari.\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      \n      &lt;script type = \"text/javascript\"&gt;\n         function WebSocketTest() {\n            \n            if (\"WebSocket\" in window) {\n               alert(\"WebSocket is supported by your Browser!\");\n               \n               // Let us open a web socket\n               var ws = new WebSocket(\"ws://localhost:9998/echo\");\n\t\t\t\t\n               ws.onopen = function() {\n                  \n                  // Web Socket is connected, send data using send()\n                  ws.send(\"Message to send\");\n                  alert(\"Message is sent...\");\n               };\n\t\t\t\t\n               ws.onmessage = function (evt) { \n                  var received_msg = evt.data;\n                  alert(\"Message is received...\");\n               };\n\t\t\t\t\n               ws.onclose = function() { \n                  \n                  // websocket is closed.\n                  alert(\"Connection is closed...\"); \n               };\n            } else {\n              \n               // The browser doesn't support WebSocket\n               alert(\"WebSocket NOT supported by your Browser!\");\n            }\n         }\n      &lt;/script&gt;\n\t\t\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;div id = \"sse\"&gt;\n         &lt;a href = \"javascript:WebSocketTest()\"&gt;Run WebSocket&lt;/a&gt;\n      &lt;/div&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n"
                },
                {
                    "title": "Install pywebsocket",
                    "html": "<p>\n Before you test above client program, you need a server which supports WebSocket. Download mod_pywebsocket-x.x.x.tar.gz from\n <a href=\"https://code.google.com/p/pywebsocket/\" rel=\"nofollow\" target=\"_blank\">\n  pywebsocket\n </a>\n which aims to provide a Web Socket extension for Apache HTTP Server and install it following these steps.\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   Unzip and untar the downloaded file.\n  </p>\n </li>\n <li>\n  <p>\n   Go inside\n   <b>\n    pywebsocket-x.x.x/src/\n   </b>\n   directory.\n  </p>\n </li>\n <li>\n  <p>\n   $python setup.py build\n  </p>\n </li>\n <li>\n  <p>\n   $sudo python setup.py install\n  </p>\n </li>\n <li>\n  <p>\n   Then read document by −\n  </p>\n  <ul class=\"list\">\n   <li>\n    $pydoc mod_pywebsocket\n   </li>\n  </ul>\n </li>\n</ul>\n<p>\n This will install it into your python environment.\n</p>\n"
                },
                {
                    "title": "Start the Server",
                    "html": "<p>\n Go to the\n <b>\n  pywebsocket-x.x.x/src/mod_pywebsocket\n </b>\n folder and run the following command −\n</p>\n<pre class=\"result notranslate\">\n$sudo python standalone.py -p 9998 -w ../example/\n</pre>\n<p>\n This will start the server listening at port 9998 and use the\n <b>\n  handlers\n </b>\n directory specified by the -w option where our echo_wsh.py resides.\n</p>\n<p>\n Now using Chrome browser open the html file your created in the beginning. If your browser supports WebSocket(), then you would get alert indicating that your browser supports WebSocket and finally when you click on \"Run WebSocket\" you would get Goodbye message sent by the server script.\n</p>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_server_sent_events.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_canvas.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Canvas",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>HTML5 element &lt;canvas&gt; gives you an easy and powerful way to draw graphics using JavaScript. It can be used to draw graphs, make photo compositions or do simple (and not so simple) animations.</p>\n<p>Here is a simple &lt;canvas&gt; element which has only two specific attributes <b>width</b> and <b>height</b> plus all the core HTML5 attributes like id, name and class, etc.</p>\n<pre class=\"result notranslate\">\n&lt;canvas id = \"mycanvas\" width = \"100\" height = \"100\"&gt;&lt;/canvas&gt;\n</pre>\n<p>You can easily find that &lt;canvas&gt; element in the DOM using <i>getElementById()</i> method as follows −</p>\n<pre class=\"result notranslate\">\nvar canvas = document.getElementById(\"mycanvas\");\n</pre>\n<p>Let us see a simple example on using &lt;canvas&gt; element in HTML5 document.</p>\n<div class=\"demo-view\">\n<a class=\"demo\" href=\"http://tpcg.io/lfhwVW\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n   \n      &lt;style&gt;\n         #mycanvas{border:1px solid red;}\n      &lt;/style&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;canvas id = \"mycanvas\" width = \"100\" height = \"100\"&gt;&lt;/canvas&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>This will produce the following result −</p>\n<iframe class=\"result\" height=\"200px\" onload=\"resizeFrame(this)\" src=\"/html5/src/canvas-example.htm\" width=\"660px\"></iframe>\n"
                },
                {
                    "title": "The Rendering Context",
                    "html": "<p>\n The &lt;canvas&gt; is initially blank, and to display something, a script first needs to access the rendering context and draw on it.\n</p>\n<p>\n The canvas element has a DOM method called\n <b>\n  getContext\n </b>\n , used to obtain the rendering context and its drawing functions. This function takes one parameter, the type of context\n <b>\n  2d\n </b>\n .\n</p>\n<p>\n Following is the code to get required context along with a check if your browser supports &lt;canvas&gt; element −\n</p>\n<pre class=\"prettyprint notranslate\">\nvar canvas  = document.getElementById(\"mycanvas\");\n\nif (canvas.getContext) {   \n   var ctx = canvas.getContext('2d');   \n   // drawing code here   \n} else {   \n   \n   // canvas-unsupported code here \n}  \n</pre>\n"
                },
                {
                    "title": "Browser Support",
                    "html": "<p>\n The latest versions of Firefox, Safari, Chrome and Opera all support for HTML5 Canvas but IE8 does not support canvas natively.\n</p>\n<p>\n You can use\n <a href=\"https://code.google.com/p/explorercanvas/\" rel=\"nofollow\" target=\"_blank\">\n  ExplorerCanvas\n </a>\n to have canvas support through Internet Explorer. You just need to include this JavaScript as follows −\n</p>\n<pre class=\"result notranslate\">\n&lt;!--[if IE]&gt;&lt;script src = \"excanvas.js\"&gt;&lt;/script&gt;&lt;![endif]--&gt;\n</pre>\n"
                },
                {
                    "title": "HTML5 Canvas Examples",
                    "html": "<p>\n This tutorial covers the following examples related to HTML5 &lt;canvas&gt; element.\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;vertical-align:middle\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Examples &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <a href=\"/html5/canvas_drawing_rectangles.htm\">\n    Drawing Rectangles\n   </a>\n   <p>\n    Learn how to draw rectangle using HTML5 &lt;canvas&gt; element\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <a href=\"/html5/canvas_drawing_paths.htm\">\n    Drawing Paths\n   </a>\n   <p>\n    Learn how to make shapes using paths in HTML5 &lt;canvas&gt; element\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <a href=\"/html5/canvas_drawing_lines.htm\">\n    Drawing Lines\n   </a>\n   <p>\n    Learn how to draw lines using HTML5 &lt;canvas&gt; element\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <a href=\"/html5/canvas_drawing_bezier.htm\">\n    Drawing Bezier\n   </a>\n   <p>\n    Learn how to draw Bezier curve using HTML5 &lt;canvas&gt; element\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <a href=\"/html5/canvas_drawing_quadratic.htm\">\n    Drawing Quadratic\n   </a>\n   <p>\n    Learn how to draw quadratic curve using HTML5 &lt;canvas&gt; element\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <a href=\"/html5/canvas_using_images.htm\" title=\"Using images\">\n    Using Images\n   </a>\n   <p>\n    Learn how to use images with HTML5 &lt;canvas&gt; element\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   7\n  </td>\n  <td>\n   <a href=\"/html5/canvas_create_gradients.htm\">\n    Create Gradients\n   </a>\n   <p>\n    Learn how to create gradients using HTML5 &lt;canvas&gt; element\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   8\n  </td>\n  <td>\n   <a href=\"/html5/canvas_styles_and_colors.htm\">\n    Styles and Colors\n   </a>\n   <p>\n    Learn how to apply styles and colors using HTML5 &lt;canvas&gt; element\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   9\n  </td>\n  <td>\n   <a href=\"/html5/canvas_text_fonts.htm\" title=\"Text and Fonts\">\n    Text and Fonts\n   </a>\n   <p>\n    Learn how to draw amazing text using different fonts and their size.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   10\n  </td>\n  <td>\n   <a href=\"/html5/canvas_pattern_shadow.htm\">\n    Pattern and Shadow\n   </a>\n   <p>\n    Learn how to draw different patterns and drop shadows.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   11\n  </td>\n  <td>\n   <a href=\"/html5/canvas_states.htm\">\n    Canvas States\n   </a>\n   <p>\n    Learn how to save and restore canvas states while doing complex drawings on a canvas.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   12\n  </td>\n  <td>\n   <a href=\"/html5/canvas_translation.htm\">\n    Canvas Translation\n   </a>\n   <p>\n    This method is used to move the canvas and its origin to a different point in the grid.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   13\n  </td>\n  <td>\n   <a href=\"/html5/canvas_rotation.htm\">\n    Canvas Rotation\n   </a>\n   <p>\n    This method is used to rotate the canvas around the current origin.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   14\n  </td>\n  <td>\n   <a href=\"/html5/canvas_scaling.htm\" title=\"Canvas Scaling\">\n    Canvas Scaling\n   </a>\n   <p>\n    This method is used to increase or decrease the units in a canvas grid.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   15\n  </td>\n  <td>\n   <a href=\"/html5/canvas_transform.htm\">\n    Canvas Transform\n   </a>\n   <p>\n    These methods allow modifications directly to the transformation matrix.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   16\n  </td>\n  <td>\n   <a href=\"/html5/canvas_composition.htm\">\n    Canvas Composition\n   </a>\n   <p>\n    This method is used to mask off certain areas or clear sections from the canvas.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   17\n  </td>\n  <td>\n   <a href=\"/html5/canvas_animation.htm\">\n    Canvas Animation\n   </a>\n   <p>\n    Learn how to create basic animation using HTML5 canvas and JavaScript.\n   </p>\n  </td>\n </tr>\n</table>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_websocket.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_audio_video.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Audio & Video",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>HTML5 features include native audio and video support without the need for Flash.</p>\n<p>The HTML5 &lt;audio&gt; and &lt;video&gt; tags make it simple to add media to a website. You need to set <b>src</b> attribute to identify the media source and include a controls attribute so the user can play and pause the media.</p>\n"
                },
                {
                    "title": "Embedding Video",
                    "html": "<p>\n Here is the simplest form of embedding a video file in your webpage −\n</p>\n<pre class=\"result notranslate\">\n&lt;video src = \"foo.mp4\"  width = \"300\" height = \"200\" controls&gt;\n   Your browser does not support the &lt;video&gt; element.   \n&lt;/video&gt;\n</pre>\n<p>\n The current HTML5 draft specification does not specify which video formats browsers should support in the video tag. But most commonly used video formats are −\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   <b>\n    Ogg\n   </b>\n   − Ogg files with Thedora video codec and Vorbis audio codec.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    mpeg4\n   </b>\n   − MPEG4 files with H.264 video codec and AAC audio codec.\n  </p>\n </li>\n</ul>\n<p>\n You can use &lt;source&gt; tag to specify media along with media type and many other attributes. A video element allows multiple source elements and browser will use the first recognized format −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/o0VJq4\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;body&gt;\n      \n      &lt;video  width = \"300\" height = \"200\" controls autoplay&gt;\n         &lt;source src = \"/html5/foo.ogg\" type =\"video/ogg\" /&gt;\n         &lt;source src = \"/html5/foo.mp4\" type = \"video/mp4\" /&gt;\n         Your browser does not support the &lt;video&gt; element.\n      &lt;/video&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"250px\" onload=\"resizeFrame(this)\" src=\"/html5/src/embedding-video.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "Video Attribute Specification",
                    "html": "<p>\n The HTML5 video tag can have a number of attributes to control the look and feel and various functionalities of the control −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Attribute &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     autoplay\n    </b>\n   </p>\n   <p>\n    This Boolean attribute if specified, the video will automatically begin to play back as soon as it can do so without stopping to finish loading the data.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     autobuffer\n    </b>\n   </p>\n   <p>\n    This Boolean attribute if specified, the video will automatically begin buffering even if it's not set to automatically play.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     controls\n    </b>\n   </p>\n   <p>\n    If this attribute is present, it will allow the user to control video playback, including volume, seeking, and pause/resume playback.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     height\n    </b>\n   </p>\n   <p>\n    This attribute specifies the height of the video's display area, in CSS pixels.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     loop\n    </b>\n   </p>\n   <p>\n    This Boolean attribute if specified, will allow video automatically seek back to the start after reaching at the end.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <p>\n    <b>\n     preload\n    </b>\n   </p>\n   <p>\n    This attribute specifies that the video will be loaded at page load, and ready to run. Ignored if autoplay is present.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   7\n  </td>\n  <td>\n   <p>\n    <b>\n     poster\n    </b>\n   </p>\n   <p>\n    This is a URL of an image to show until the user plays or seeks.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   8\n  </td>\n  <td>\n   <p>\n    <b>\n     src\n    </b>\n   </p>\n   <p>\n    The URL of the video to embed. This is optional; you may instead use the &lt;source&gt; element within the video block to specify the video to embed.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   9\n  </td>\n  <td>\n   <p>\n    <b>\n     width\n    </b>\n   </p>\n   <p>\n    This attribute specifies the width of the video's display area, in CSS pixels.\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "Embedding Audio",
                    "html": "<p>\n HTML5 supports &lt;audio&gt; tag which is used to embed sound content in an HTML or XHTML document as follows.\n</p>\n<pre class=\"result notranslate\">\n&lt;audio src = \"foo.wav\" controls autoplay&gt;\n   Your browser does not support the &lt;audio&gt; element.   \n&lt;/audio&gt;\n</pre>\n<p>\n The current HTML5 draft specification does not specify which audio formats browsers should support in the audio tag. But most commonly used audio formats are\n <b>\n  ogg, mp3\n </b>\n and\n <b>\n  wav\n </b>\n .\n</p>\n<p>\n You can use &lt;source&amp;ggt; tag to specify media along with media type and many other attributes. An audio element allows multiple source elements and browser will use the first recognized format −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/j0IBar\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;body&gt;\n      \n      &lt;audio controls autoplay&gt;\n         &lt;source src = \"/html5/audio.ogg\" type = \"audio/ogg\" /&gt;\n         &lt;source src = \"/html5/audio.wav\" type = \"audio/wav\" /&gt;\n         Your browser does not support the &lt;audio&gt; element.\n      &lt;/audio&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/embedding-audio.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "Audio Attribute Specification",
                    "html": "<p>\n The HTML5 audio tag can have a number of attributes to control the look and feel and various functionalities of the control −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Attribute &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     autoplay\n    </b>\n   </p>\n   <p>\n    This Boolean attribute if specified, the audio will automatically begin to play back as soon as it can do so without stopping to finish loading the data.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     autobuffer\n    </b>\n   </p>\n   <p>\n    This Boolean attribute if specified, the audio will automatically begin buffering even if it's not set to automatically play.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     controls\n    </b>\n   </p>\n   <p>\n    If this attribute is present, it will allow the user to control audio playback, including volume, seeking, and pause/resume playback.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     loop\n    </b>\n   </p>\n   <p>\n    This Boolean attribute if specified, will allow audio automatically seek back to the start after reaching at the end.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     preload\n    </b>\n   </p>\n   <p>\n    This attribute specifies that the audio will be loaded at page load, and ready to run. Ignored if autoplay is present.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <p>\n    <b>\n     src\n    </b>\n   </p>\n   <p>\n    The URL of the audio to embed. This is optional; you may instead use the &lt;source&gt; element within the video block to specify the video to embed.\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "Handling Media Events",
                    "html": "<p>\n The HTML5 audio and video tag can have a number of attributes to control various functionalities of the control using JavaScript −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   S.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Event &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     abort\n    </b>\n   </p>\n   <p>\n    This event is generated when playback is aborted.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     canplay\n    </b>\n   </p>\n   <p>\n    This event is generated when enough data is available that the media can be played.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     ended\n    </b>\n   </p>\n   <p>\n    This event is generated when playback completes.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     error\n    </b>\n   </p>\n   <p>\n    This event is generated when an error occurs.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     loadeddata\n    </b>\n   </p>\n   <p>\n    This event is generated when the first frame of the media has finished loading.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <p>\n    <b>\n     loadstart\n    </b>\n   </p>\n   <p>\n    This event is generated when loading of the media begins.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   7\n  </td>\n  <td>\n   <p>\n    <b>\n     pause\n    </b>\n   </p>\n   <p>\n    This event is generated when playback is paused.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   8\n  </td>\n  <td>\n   <p>\n    <b>\n     play\n    </b>\n   </p>\n   <p>\n    This event is generated when playback starts or resumes.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   9\n  </td>\n  <td>\n   <p>\n    <b>\n     progress\n    </b>\n   </p>\n   <p>\n    This event is generated periodically to inform the progress of the downloading the media.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   10\n  </td>\n  <td>\n   <p>\n    <b>\n     ratechange\n    </b>\n   </p>\n   <p>\n    This event is generated when the playback speed changes.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   11\n  </td>\n  <td>\n   <p>\n    <b>\n     seeked\n    </b>\n   </p>\n   <p>\n    This event is generated when a seek operation completes.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   12\n  </td>\n  <td>\n   <p>\n    <b>\n     seeking\n    </b>\n   </p>\n   <p>\n    This event is generated when a seek operation begins.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   13\n  </td>\n  <td>\n   <p>\n    <b>\n     suspend\n    </b>\n   </p>\n   <p>\n    This event is generated when loading of the media is suspended.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   14\n  </td>\n  <td>\n   <p>\n    <b>\n     volumechange\n    </b>\n   </p>\n   <p>\n    This event is generated when the audio volume changes.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   15\n  </td>\n  <td>\n   <p>\n    <b>\n     waiting\n    </b>\n   </p>\n   <p>\n    This event is generated when the requested operation (such as playback) is delayed pending the completion of another operation (such as a seek).\n   </p>\n  </td>\n </tr>\n</table>\n<p>\n Following is the example which allows to play the given video −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/6lCtEJ\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n   \n      &lt;script type = \"text/javascript\"&gt;\n         function PlayVideo() {\n            var v = document.getElementsByTagName(\"video\")[0];  \n            v.play(); \n         }\n      &lt;/script&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n   \n      &lt;form&gt;         \n         &lt;video width = \"300\" height = \"200\" src = \"/html5/foo.mp4\"&gt;\n         Your browser does not support the video element.\n         &lt;/video&gt;\n         &lt;br /&gt;\n         &lt;input type = \"button\" onclick = \"PlayVideo();\" value = \"Play\"/&gt;\n      &lt;/form&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"250px\" onload=\"resizeFrame(this)\" src=\"/html5/src/video.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "Configuring Servers for Media Type",
                    "html": "<p>\n Most servers don't by default serve Ogg or mp4 media with the correct MIME types, so you'll likely need to add the appropriate configuration for this.\n</p>\n<pre class=\"result notranslate\">\nAddType audio/ogg .oga\nAddType audio/wav .wav\nAddType video/ogg .ogv .ogg\nAddType video/mp4 .mp4\n</pre>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_canvas.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_geolocation.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Geolocation",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>HTML5 Geolocation API lets you share your location with your favorite web sites. A JavaScript can capture your latitude and longitude and can be sent to backend web server and do fancy location-aware things like finding local businesses or showing your location on a map.</p>\n<p>Today most of the browsers and mobile devices support Geolocation API. The geolocation APIs work with a new property of the global navigator object ie. Geolocation object which can be created as follows −</p>\n<pre class=\"result notranslate\">\nvar geolocation = navigator.geolocation;\n</pre>\n<p>The geolocation object is a service object that allows widgets to retrieve information about the geographic location of the device.</p>\n"
                },
                {
                    "title": "Geolocation Methods",
                    "html": "<p>\n The geolocation object provides the following methods −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Method &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <a href=\"/html5/geolocation_getcurrentposition.htm\">\n    getCurrentPosition()\n   </a>\n   <p>\n    This method retrieves the current geographic location of the user.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <a href=\"/html5/geolocation_watchposition.htm\">\n    watchPosition()\n   </a>\n   <p>\n    This method retrieves periodic updates about the current geographic location of the device.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <a href=\"/html5/geolocation_clearwatch.htm\">\n    clearWatch()\n   </a>\n   <p>\n    This method cancels an ongoing watchPosition call.\n   </p>\n  </td>\n </tr>\n</table>\n<h3>\n Example\n</h3>\n<p>\n Following is a sample code to use any of the above method −\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction getLocation() {\n   var geolocation = navigator.geolocation;\n   geolocation.getCurrentPosition(showLocation, errorHandler);\n}\n</pre>\n<p>\n Here showLocation and errorHandler are callback methods which would be used to get actual position as explained in next section and to handle errors if there is any.\n</p>\n"
                },
                {
                    "title": "Location Properties",
                    "html": "<p>\n Geolocation methods getCurrentPosition() and getPositionUsingMethodName() specify the callback method that retrieves the location information. These methods are called asynchronously with an object\n <b>\n  Position\n </b>\n which stores the complete location information.\n</p>\n<p>\n The\n <b>\n  Position\n </b>\n object specifies the current geographic location of the device. The location is expressed as a set of geographic coordinates together with information about heading and speed.\n</p>\n<p>\n The following table describes the properties of the Position object. For the optional properties if the system cannot provide a value, the value of the property is set to null.\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Property\n  </th>\n  <th style=\"text-align:center;\">\n   Type\n  </th>\n  <th style=\"text-align:center;\">\n   Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   coords\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   objects\n  </td>\n  <td>\n   Specifies the geographic location of the device. The location is expressed as a set of geographic coordinates together with information about heading and speed.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   coords.latitude\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   Specifies the latitude estimate in decimal degrees. The value range is [-90.00, +90.00].\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   coords.longitude\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   Specifies the longitude estimate in decimal degrees. The value range is [-180.00, +180.00].\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   coords.altitude\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   [Optional] Specifies the altitude estimate in meters above the WGS 84 ellipsoid.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   coords.accuracy\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   [Optional] Specifies the accuracy of the latitude and longitude estimates in meters.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   coords.altitudeAccuracy\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   [Optional] Specifies the accuracy of the altitude estimate in meters.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   coords.heading\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   [Optional] Specifies the device's current direction of movement in degrees counting clockwise relative to true north.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   coords.speed\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   [Optional] Specifies the device's current ground speed in meters per second.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   timestamp\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   date\n  </td>\n  <td>\n   Specifies the time when the location information was retrieved and the Position object created.\n  </td>\n </tr>\n</table>\n<h3>\n Example\n</h3>\n<p>\n Following is a sample code which makes use of Position object. Here showLocation method is a callback method −\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction showLocation( position ) {\n   var latitude = position.coords.latitude;\n   var longitude = position.coords.longitude;\n   ...\n}\n</pre>\n"
                },
                {
                    "title": "Handling Errors",
                    "html": "<p>\n Geolocation is complicated, and it is very much required to catch any error and handle it gracefully.\n</p>\n<p>\n The geolocations methods getCurrentPosition() and watchPosition() make use of an error handler callback method which gives\n <b>\n  PositionError\n </b>\n object. This object has following two properties −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Property\n  </th>\n  <th style=\"text-align:center;\">\n   Type\n  </th>\n  <th style=\"text-align:center;\">\n   Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;\">\n   code\n  </td>\n  <td style=\"text-align:center;\">\n   Number\n  </td>\n  <td>\n   Contains a numeric code for the error.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;\">\n   message\n  </td>\n  <td style=\"text-align:center;\">\n   String\n  </td>\n  <td>\n   Contains a human-readable description of the error.\n  </td>\n </tr>\n</table>\n<p>\n The following table describes the possible error codes returned in the PositionError object.\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Code\n  </th>\n  <th style=\"text-align:center;\">\n   Constant\n  </th>\n  <th style=\"text-align:center;\">\n   Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   0\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   UNKNOWN_ERROR\n  </td>\n  <td>\n   The method failed to retrieve the location of the device due to an unknown error.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   1\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   PERMISSION_DENIED\n  </td>\n  <td>\n   The method failed to retrieve the location of the device because the application does not have permission to use the Location Service.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   2\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   POSITION_UNAVAILABLE\n  </td>\n  <td>\n   The location of the device could not be determined.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   3\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   TIMEOUT\n  </td>\n  <td>\n   The method was unable to retrieve the location information within the specified maximum timeout interval.\n  </td>\n </tr>\n</table>\n<h3>\n Example\n</h3>\n<p>\n Following is a sample code which makes use of PositionError object. Here errorHandler method is a callback method −\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction errorHandler( err ) {\n   \n   if (err.code == 1) {\n      \n      // access is denied\n   }\n   ...\n}\n</pre>\n"
                },
                {
                    "title": "Position Options",
                    "html": "<p>\n Following is the actual syntax of getCurrentPosition() method −\n</p>\n<pre class=\"result notranslate\">\ngetCurrentPosition(callback, ErrorCallback, options)\n</pre>\n<p>\n Here third argument is the\n <b>\n  PositionOptions\n </b>\n object which specifies a set of options for retrieving the geographic location of the device.\n</p>\n<p>\n Following are the options which can be specified as third argument −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Property\n  </th>\n  <th style=\"text-align:center;\">\n   Type\n  </th>\n  <th style=\"text-align:center;\">\n   Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   enableHighAccuracy\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Boolean\n  </td>\n  <td>\n   Specifies whether the widget wants to receive the most accurate location estimate possible. By default this is false.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   timeout\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   The timeout property is the number of milliseconds your web application is willing to wait for a position.\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   maximumAge\n  </td>\n  <td style=\"text-align:center; vertical-align:middle;\">\n   Number\n  </td>\n  <td>\n   Specifies the expiry time in milliseconds for cached location information.\n  </td>\n </tr>\n</table>\n<h3>\n Example\n</h3>\n<p>\n Following is a sample code which shows how to use above mentioned methods −\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction getLocation() {\n   var geolocation = navigator.geolocation;\n   geolocation.getCurrentPosition(showLocation, errorHandler, {maximumAge: 75000});\n}\n</pre>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_audio_video.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_microdata.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Microdata",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>Microdata is a standardized way to provide additional semantics in your web pages.</p>\n<p>Microdata lets you define your own customized elements and start embedding custom properties in your web pages. At a high level, microdata consists of a group of name-value pairs.</p>\n<p>The groups are called <b>items</b>, and each name-value pair is a <b>property</b>. Items and properties are represented by regular elements.</p>\n<h3>Example</h3>\n<ul class=\"list\">\n<li><p>To create an item, the <b>itemscope</b> attribute is used.</p></li>\n<li><p>To add a property to an item, the <b>itemprop</b> attribute is used on one of the item's descendants.</p></li>\n</ul>\n<p>Here there are two items, each of which has the property \"name\" −</p>\n<div class=\"demo-view\">\n<a class=\"demo\" href=\"http://tpcg.io/9IVeqs\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n   &lt;body&gt;\n      \n      &lt;div itemscope&gt;\n         &lt;p&gt;My name is &lt;span itemprop = \"name\"&gt;Zara&lt;/span&gt;.&lt;/p&gt;\n      &lt;/div&gt;\n      \n      &lt;div itemscope&gt;\n         &lt;p&gt;My name is &lt;span itemprop = \"name\"&gt;Nuha&lt;/span&gt;.&lt;/p&gt;\n      &lt;/div&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>It will produce the following result −</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/micro_data.htm\" width=\"660px\"></iframe>\n<p>Properties generally have values that are strings but it can have following data types −</p>\n"
                },
                {
                    "title": "Global Attributes",
                    "html": "<p>\n Microdata introduces five global attributes which would be available for any element to use and give context for machines about your data.\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Attribute &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     itemscope\n    </b>\n   </p>\n   <p>\n    This is used to create an item. The itemscope attribute is a Boolean attribute that tells that there is Microdata on this page, and this is where it starts.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     itemtype\n    </b>\n   </p>\n   <p>\n    This attribute is a valid URL which defines the item and provides the context for the properties.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     itemid\n    </b>\n   </p>\n   <p>\n    This attribute is global identifier for the item.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     itemprop\n    </b>\n   </p>\n   <p>\n    This attribute defines a property of the item.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     itemref\n    </b>\n   </p>\n   <p>\n    This attribute gives a list of additional elements to crawl to find the name-value pairs of the item.\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "Properties Datatypes",
                    "html": "<p>\n Properties generally have values that are strings as mentioned in above example but they can also have values that are URLs. Following example has one property, \"image\", whose value is a URL −\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;div itemscope&gt;\n   &lt;img itemprop = \"image\" src = \"tp-logo.gif\" alt = \"TutorialsPoint\"&gt;\n&lt;/div&gt;\n</pre>\n<p>\n Properties can also have values that are dates, times, or dates and times. This is achieved using the\n <b>\n  time\n </b>\n element and its\n <b>\n  datetime\n </b>\n attribute.\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/LlDqH5\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n   &lt;body&gt;\n      \n      &lt;div itemscope&gt;\n         My birthday is:\n         &lt;time itemprop = \"birthday\" datetime = \"1971-05-08\"&gt;\n            Aug 5th 1971\n         &lt;/time&gt;\n      &lt;/div&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n It will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/micro_data_2.htm\" width=\"660px\">\n</iframe>\n<p>\n Properties can also themselves be groups of name-value pairs, by putting the itemscope attribute on the element that declares the property.\n</p>\n"
                },
                {
                    "title": "Microdata API support",
                    "html": "<p>\n If a browser supports the HTML5 microdata API, there will be a getItems() function on the global document object. If browser doesn't support microdata, the getItems() function will be undefined.\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction supports_microdata_api() {\n   return !!document.getItems;\n}\n</pre>\n<p>\n Modernizr does not yet support checking for the microdata API, so you’ll need to use the function like the one listed above.\n</p>\n<p>\n The HTML5 microdata standard includes both HTML markup (primarily for search engines) and a set of DOM functions (primarily for browsers).\n</p>\n<p>\n You can include microdata markup in your web pages, and search engines that don't understand the microdata attributes will just ignore them. But if you need to access or manipulate microdata through the DOM, you'll need to check whether the browser supports the microdata DOM API.\n</p>\n"
                },
                {
                    "title": "Defining Microdata Vocabulary",
                    "html": "<p>\n To define microdata vocabulary you need a namespace URL which points to a working web page. For example https://data-vocabulary.org/Person can be used as the namespace for a personal microdata vocabulary with the following named properties −\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   <b>\n    name\n   </b>\n   − Person name as a simple string\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    Photo\n   </b>\n   − A URL to a picture of the person.\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    URL\n   </b>\n   − A website belonging to the person.\n  </p>\n </li>\n</ul>\n<p>\n Using about properties a person microdata could be as follows −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/nUEkgk\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n   &lt;body&gt;\n   \n      &lt;div itemscope&gt;\n         &lt;section itemscope itemtype = \"http://data-vocabulary.org/Person\"&gt;\n            &lt;h1 itemprop = \"name\"&gt;Gopal K Varma&lt;/h1&gt;\n         \n            &lt;p&gt;\n               &lt;img itemprop = \"photo\" \n                  src = \"http://www.tutorialspoint.com/green/images/logo.png\"&gt;\n            &lt;/p&gt;\n            \n            &lt;a itemprop = \"url\" href = \"#\"&gt;Site&lt;/a&gt;\n         &lt;/section&gt;\n      &lt;/div&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n It will produce the following result −\n</p>\n<iframe class=\"result\" height=\"200px\" onload=\"resizeFrame(this)\" src=\"/html5/src/micro_data_3.htm\" width=\"660px\">\n</iframe>\n<p>\n Google supports microdata as part of their Rich Snippets program. When Google's web crawler parses your page and finds microdata properties that conform to the http://datavocabulary.org/Person vocabulary, it parses out those properties and stores them alongside the rest of the page data.\n</p>\n<p>\n You can test above example using\n <a href=\"https://search.google.com/structured-data/testing-tool\" rel=\"nofollow\" target=\"_blank\">\n  Rich Snippets Testing\n </a>\n Tool using http://www.tutorialspoint.com/html5/microdata.htm\n</p>\n<p>\n For further development on Microdata you can always refer to\n <a href=\"https://www.w3.org/TR/html5/microdata.html\" rel=\"nofollow\" target=\"_blank\">\n  HTML5 Microdata\n </a>\n .\n</p>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_geolocation.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_drag_drop.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Drag & drop",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>Drag and Drop (DnD) is powerful User Interface concept which makes it easy to copy, reorder and deletion of items with the help of mouse clicks. This allows the user to click and hold the mouse button down over an element, drag it to another location, and release the mouse button to drop the element there.</p>\n<p>To achieve drag and drop functionality with traditional HTML4, developers would either have to either have to use complex JavaScript programming or other JavaScript frameworks like jQuery etc.</p>\n<p>Now HTML 5 came up with a Drag and Drop (DnD) API that brings native DnD support to the browser making it much easier to code up.</p>\n<p>HTML 5 DnD is supported by all the major browsers like Chrome, Firefox 3.5 and Safari 4 etc.</p>\n"
                },
                {
                    "title": "Drag and Drop Events",
                    "html": "<p>\n There are number of events which are fired during various stages of the drag and drop operation. These events are listed below −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Events &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     dragstart\n    </b>\n   </p>\n   <p>\n    Fires when the user starts dragging of the object.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     dragenter\n    </b>\n   </p>\n   <p>\n    Fired when the mouse is first moved over the target element while a drag is occurring. A listener for this event should indicate whether a drop is allowed over this location. If there are no listeners, or the listeners perform no operations, then a drop is not allowed by default.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     dragover\n    </b>\n   </p>\n   <p>\n    This event is fired as the mouse is moved over an element when a drag is occurring. Much of the time, the operation that occurs during a listener will be the same as the dragenter event.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     dragleave\n    </b>\n   </p>\n   <p>\n    This event is fired when the mouse leaves an element while a drag is occurring. Listeners should remove any highlighting or insertion markers used for drop feedback.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     drag\n    </b>\n   </p>\n   <p>\n    Fires every time the mouse is moved while the object is being dragged.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <p>\n    <b>\n     drop\n    </b>\n   </p>\n   <p>\n    The drop event is fired on the element where the drop was occurred at the end of the drag operation. A listener would be responsible for retrieving the data being dragged and inserting it at the drop location.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   7\n  </td>\n  <td>\n   <p>\n    <b>\n     dragend\n    </b>\n   </p>\n   <p>\n    Fires when the user releases the mouse button while dragging an object.\n   </p>\n  </td>\n </tr>\n</table>\n<p>\n <b>\n  Note\n </b>\n − Note that only drag events are fired; mouse events such as\n <i>\n  mousemove\n </i>\n are not fired during a drag operation.\n</p>\n"
                },
                {
                    "title": "The DataTransfer Object",
                    "html": "<p>\n The event listener methods for all the drag and drop events accept\n <b>\n  Event\n </b>\n object which has a readonly attribute called\n <b>\n  dataTransfer\n </b>\n .\n</p>\n<p>\n The\n <b>\n  event.dataTransfer\n </b>\n returns\n <b>\n  DataTransfer\n </b>\n object associated with the event as follows −\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction EnterHandler(event) {\n   DataTransfer dt = event.dataTransfer;\n   .............\n}\n</pre>\n<p>\n The\n <i>\n  DataTransfer\n </i>\n object holds data about the drag and drop operation. This data can be retrieved and set in terms of various attributes associated with DataTransfer object as explained below −\n</p>\n<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   DataTransfer attributes and their description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     dataTransfer.dropEffect [ = value ]\n    </b>\n   </p>\n   <ul class=\"list\">\n    <li>\n     <p>\n      Returns the kind of operation that is currently selected.\n     </p>\n    </li>\n    <li>\n     <p>\n      This attribute can be set, to change the selected operation.\n     </p>\n    </li>\n    <li>\n     <p>\n      The possible values are none, copy, link, and move.\n     </p>\n    </li>\n   </ul>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     dataTransfer.effectAllowed [ = value ]\n    </b>\n   </p>\n   <ul class=\"list\">\n    <li>\n     <p>\n      Returns the kinds of operations that are to be allowed.\n     </p>\n    </li>\n    <li>\n     <p>\n      This attribute can be set, to change the allowed operations.\n     </p>\n    </li>\n    <li>\n     <p>\n      The possible values are\n      <b>\n       none, copy, copyLink, copyMove, link, linkMove, move, all\n      </b>\n      and\n      <b>\n       uninitialized\n      </b>\n      .\n     </p>\n    </li>\n   </ul>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     dataTransfer.types\n    </b>\n   </p>\n   <p>\n    Returns a DOMStringList listing the formats that were set in the dragstart event. In addition, if any files are being dragged, then one of the types will be the string \"Files\".\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     dataTransfer.clearData ( [ format ] )\n    </b>\n   </p>\n   <p>\n    Removes the data of the specified formats. Removes all data if the argument is omitted.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     dataTransfer.setData(format, data)\n    </b>\n   </p>\n   <p>\n    Adds the specified data.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <p>\n    <b>\n     data = dataTransfer.getData(format)\n    </b>\n   </p>\n   <p>\n    Returns the specified data. If there is no such data, returns the empty string.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   7\n  </td>\n  <td>\n   <p>\n    <b>\n     dataTransfer.files\n    </b>\n   </p>\n   <p>\n    Returns a FileList of the files being dragged, if any.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   8\n  </td>\n  <td>\n   <p>\n    <b>\n     dataTransfer.setDragImage(element, x, y)\n    </b>\n   </p>\n   <p>\n    Uses the given element to update the drag feedback, replacing any previously specified feedback.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   9\n  </td>\n  <td>\n   <p>\n    <b>\n     dataTransfer.addElement(element)\n    </b>\n   </p>\n   <p>\n    Adds the given element to the list of elements used to render the drag feedback.\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "Drag and Drop Process",
                    "html": "<p>\n Following are the steps to be carried out to implement Drag and Drop operation −\n</p>\n<h3>\n Step 1 - Making an Object Draggable\n</h3>\n<p>\n Here are steps to be taken −\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   If you want to drag an element, you need to set the\n   <b>\n    draggable\n   </b>\n   attribute to\n   <b>\n    true\n   </b>\n   for that element.\n  </p>\n </li>\n <li>\n  <p>\n   Set an event listener for\n   <b>\n    dragstart\n   </b>\n   that stores the data being dragged.\n  </p>\n </li>\n <li>\n  <p>\n   The event listener\n   <b>\n    dragstart\n   </b>\n   will set the allowed effects (copy, move, link, or some combination).\n  </p>\n </li>\n</ul>\n<p>\n Following is the example to make an object draggable −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/efoIfu\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      \n      &lt;style type = \"text/css\"&gt;\n         \n         #boxA, #boxB {\n            float:left;padding:10px;margin:10px; -moz-user-select:none;\n         }\n         #boxA { background-color: #6633FF; width:75px; height:75px;  }\n         #boxB { background-color: #FF6699; width:150px; height:150px; }\n      &lt;/style&gt;\n      \n      &lt;script type = \"text/javascript\"&gt;\n         \n         function dragStart(ev) {\n            ev.dataTransfer.effectAllowed = 'move';\n            ev.dataTransfer.setData(\"Text\", ev.target.getAttribute('id'));\n            ev.dataTransfer.setDragImage(ev.target,0,0);\n            \n            return true;\n         }\n      &lt;/script&gt;\n      \n   &lt;/head&gt;\n   &lt;body&gt;\n      \n      &lt;center&gt;\n         &lt;h2&gt;Drag and drop HTML5 demo&lt;/h2&gt;\n         &lt;div&gt;Try to drag the purple box around.&lt;/div&gt;\n         \n         &lt;div id = \"boxA\" draggable = \"true\" \n            ondragstart = \"return dragStart(ev)\"&gt;\n            &lt;p&gt;Drag Me&lt;/p&gt;\n         &lt;/div&gt;\n         \n         &lt;div id = \"boxB\"&gt;Dustbin&lt;/div&gt;\n      &lt;/center&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/object-draggable.htm\" width=\"600px\">\n</iframe>\n<h3>\n Step 2 - Dropping the Object\n</h3>\n<p>\n To accept a drop, the drop target has to listen to at least three events.\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   The\n   <b>\n    dragenter\n   </b>\n   event, which is used to determine whether or not the drop target is to accept the drop. If the drop is to be accepted, then this event has to be canceled.\n  </p>\n </li>\n <li>\n  <p>\n   The\n   <b>\n    dragover\n   </b>\n   event, which is used to determine what feedback is to be shown to the user. If the event is canceled, then the feedback (typically the cursor) is updated based on the dropEffect attribute's value.\n  </p>\n </li>\n <li>\n  <p>\n   Finally, the\n   <b>\n    drop\n   </b>\n   event, which allows the actual drop to be performed.\n  </p>\n </li>\n</ul>\n<p>\n Following is the example to drop an object into another object −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/mYCjJM\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;style type=\"text/css\"&gt;\n         #boxA, #boxB {\n            float:left;padding:10px;margin:10px;-moz-user-select:none;\n         }\n         #boxA { background-color: #6633FF; width:75px; height:75px;  }\n         #boxB { background-color: #FF6699; width:150px; height:150px; }\n      &lt;/style&gt;\n      &lt;script type=\"text/javascript\"&gt;\n         function dragStart(ev) {\n            ev.dataTransfer.effectAllowed='move';\n            ev.dataTransfer.setData(\"Text\", ev.target.getAttribute('id'));\n            ev.dataTransfer.setDragImage(ev.target,0,0);\n            return true;\n         }\n         function dragEnter(ev) {\n            event.preventDefault();\n            return true;\n         }\n         function dragOver(ev) {\n            return false;\n         }\n         function dragDrop(ev) {\n            var src = ev.dataTransfer.getData(\"Text\");\n            ev.target.appendChild(document.getElementById(src));\n            ev.stopPropagation();\n            return false;\n         }\n      &lt;/script&gt;\n   &lt;/head&gt;\n   &lt;body&gt;\n      &lt;center&gt;\n         &lt;h2&gt;Drag and drop HTML5 demo&lt;/h2&gt;\n         &lt;div&gt;Try to move the purple box into the pink box.&lt;/div&gt;\n         &lt;div id=\"boxA\" draggable=\"true\" ondragstart=\"return dragStart(event)\"&gt;\n            &lt;p&gt;Drag Me&lt;/p&gt;\n         &lt;/div&gt;\n         &lt;div id=\"boxB\" ondragenter=\"return dragEnter(event)\" ondrop=\"return dragDrop(event)\" ondragover=\"return dragOver(event)\"&gt;Dustbin&lt;/div&gt;\n      &lt;/center&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"300px\" onload=\"resizeFrame(this)\" src=\"/html5/src/dropping-object.htm\" width=\"660px\">\n</iframe>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_microdata.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_web_workers.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Web Workers",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>JavaScript was designed to run in a single-threaded environment, meaning multiple scripts cannot run at the same time. Consider a situation where you need to handle UI events, query and process large amounts of API data, and manipulate the DOM.</p>\n<p>JavaScript will hang your browser in situation where CPU utilization is high. Let us take a simple example where JavaScript goes through a big loop −</p>\n<div class=\"demo-view\">\n<a class=\"demo\" href=\"http://tpcg.io/FPv46P\" rel=\"nofollow\" target=\"_blank\"><i class=\"fa-external-link\"></i> Live Demo</a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;title&gt;Big for loop&lt;/title&gt;\n      \n      &lt;script&gt;\n         function bigLoop() {\n            \n            for (var i = 0; i &lt;= 10000; i += 1) {\n               var j = i;\n            }\n            alert(\"Completed \" + j + \"iterations\" );\n         }\n         \n         function sayHello(){\n            alert(\"Hello sir....\" );\n         }\n      &lt;/script&gt;\n      \n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;input type = \"button\" onclick = \"bigLoop();\" value = \"Big Loop\" /&gt;\n      &lt;input type = \"button\" onclick = \"sayHello();\" value = \"Say Hello\" /&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>It will produce the following result −</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/web_worker.htm\" width=\"660px\"></iframe>\n<p>When you click Big Loop button it displays following result in Firefox −</p>\n<img alt=\"Big Loop\" src=\"/html5/images/bigloop.jpg\"/>\n"
                },
                {
                    "title": "What is Web Workers?",
                    "html": "<p>\n The situation explained above can be handled using\n <b>\n  Web Workers\n </b>\n who will do all the computationally expensive tasks without interrupting the user interface and typically run on separate threads.\n</p>\n<p>\n Web Workers allow for long-running scripts that are not interrupted by scripts that respond to clicks or other user interactions, and allows long tasks to be executed without yielding to keep the page responsive.\n</p>\n<p>\n Web Workers are background scripts and they are relatively heavy-weight, and are not intended to be used in large numbers. For example, it would be inappropriate to launch one worker for each pixel of a four megapixel image.\n</p>\n<p>\n When a script is executing inside a Web Worker it cannot access the web page's window object (window.document), which means that Web Workers don't have direct access to the web page and the DOM API. Although Web Workers cannot block the browser UI, they can still consume CPU cycles and make the system less responsive.\n</p>\n"
                },
                {
                    "title": "How Web Workers Work?",
                    "html": "<p>\n Web Workers are initialized with the URL of a JavaScript file, which contains the code the worker will execute. This code sets event listeners and communicates with the script that spawned it from the main page. Following is the simple syntax −\n</p>\n<pre class=\"result notranslate\">\nvar worker = new Worker('bigLoop.js');\n</pre>\n<p>\n If the specified javascript file exists, the browser will spawn a new worker thread, which is downloaded asynchronously. If the path to your worker returns an 404 error, the worker will fail silently.\n</p>\n<p>\n If your application has multiple supporting JavaScript files, you can import them\n <b>\n  importScripts()\n </b>\n method which takes file name(s) as argument separated by comma as follows −\n</p>\n<pre class=\"result notranslate\">\nimportScripts(\"helper.js\", \"anotherHelper.js\");\n</pre>\n<p>\n Once the Web Worker is spawned, communication between web worker and its parent page is done using the\n <b>\n  postMessage()\n </b>\n method. Depending on your browser/version, postMessage() can accept either a string or JSON object as its single argument.\n</p>\n<p>\n Message passed by Web Worker is accessed using\n <b>\n  onmessage\n </b>\n event in the main page. Now let us write our bigLoop example using Web Worker. Below is the main page (hello.htm) which will spawn a web worker to execute the loop and to return the final value of variable\n <b>\n  j\n </b>\n −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/cWcw0d\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;title&gt;Big for loop&lt;/title&gt;\n      \n      &lt;script&gt;\n         var worker = new Worker('bigLoop.js');\n         \n         worker.onmessage = function (event) {\n            alert(\"Completed \" + event.data + \"iterations\" );\n         };\n         \n         function sayHello() {\n            alert(\"Hello sir....\" );\n         }\n      &lt;/script&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;input type = \"button\" onclick = \"sayHello();\" value = \"Say Hello\"/&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n Following is the content of bigLoop.js file. This makes use of\n <b>\n  postMessage()\n </b>\n API to pass the communication back to main page −\n</p>\n<pre class=\"prettyprint notranslate\">\nfor (var i = 0; i &lt;= 1000000000; i += 1) {\n   var j = i;\n}\npostMessage(j);\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/webworkers.htm\" width=\"660px\">\n</iframe>\n"
                },
                {
                    "title": "Stopping Web Workers",
                    "html": "<p>\n Web Workers don't stop by themselves but the page that started them can stop them by calling\n <b>\n  terminate()\n </b>\n method.\n</p>\n<pre class=\"result notranslate\">\nworker.terminate();\n</pre>\n<p>\n A terminated Web Worker will no longer respond to messages or perform any additional computations. You cannot restart a worker; instead, you can create a new worker using the same URL.\n</p>\n"
                },
                {
                    "title": "Handling Errors",
                    "html": "<p>\n The following shows an example of an error handling function in a Web Worker JavaScript file that logs errors to the console. With error handling code, above example would become as following −\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;title&gt;Big for loop&lt;/title&gt;\n      \n      &lt;script&gt;\n         var worker = new Worker('bigLoop.js');\n         \n         worker.onmessage = function (event) {\n            alert(\"Completed \" + event.data + \"iterations\" );\n         };\n         \n         worker.onerror = function (event) {\n            console.log(event.message, event);\n         };\n         \n         function sayHello() {\n            alert(\"Hello sir....\" );\n         }\n      &lt;/script&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;input type = \"button\" onclick = \"sayHello();\" value = \"Say Hello\"/&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n"
                },
                {
                    "title": "Checking for Browser Support",
                    "html": "<p>\n Following is the syntax to detect a Web Worker feature support available in a browser −\n</p>\n<div class=\"demo-view\">\n <a class=\"demo\" href=\"http://tpcg.io/Fmx7cx\" rel=\"nofollow\" target=\"_blank\">\n  <i class=\"fa-external-link\">\n  </i>\n  Live Demo\n </a>\n</div>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE HTML&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;title&gt;Big for loop&lt;/title&gt;\n      &lt;script src = \"/js/modernizr-1.5.min.js\"&gt;&lt;/script&gt;\n      \n      &lt;script&gt;\n      function myFunction() {\n         \n         if (Modernizr.webworkers) {\n            alert(\"Congratulation!! you have web workers support.\" );\n         } else {\n            alert(\"Sorry!! you do not have web workers support.\" );\n         }\n      }\n      &lt;/script&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;button onclick = \"myFunction()\"&gt;Click me&lt;/button&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n This will produce the following result −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/checking-browser-support.htm\" width=\"600px\">\n</iframe>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_drag_drop.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_indexeddb.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "IndexedDB",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>The indexeddb is a new HTML5 concept to store the data inside user's browser. indexeddb is more power than local storage and useful for applications that requires to store large amount of the data. These applications can run more efficiency and load faster.</p>\n"
                },
                {
                    "title": "Why to use indexeddb?",
                    "html": "<p>\n The W3C has announced that the Web SQL database is a deprecated local storage specification so web developer should not use this technology any more. indexeddb is an alternative for web SQL data base and more effective than older technologies.\n</p>\n"
                },
                {
                    "title": "Features",
                    "html": "<ul class=\"list\">\n <li>\n  it stores key-pair values\n </li>\n <li>\n  it is not a relational database\n </li>\n <li>\n  IndexedDB API is mostly asynchronous\n </li>\n <li>\n  it is not a structured query language\n </li>\n <li>\n  it has supported to access the data from same domain\n </li>\n</ul>\n"
                },
                {
                    "title": "IndexedDB",
                    "html": "<p>\n Before enter into an indexeddb, we need to add some prefixes of implementation as shown below\n</p>\n<pre class=\"prettyprint notranslate\">\nwindow.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || \nwindow.msIndexedDB;\n \nwindow.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || \nwindow.msIDBTransaction;\nwindow.IDBKeyRange = window.IDBKeyRange || \nwindow.webkitIDBKeyRange || window.msIDBKeyRange\n \nif (!window.indexedDB) {\n   window.alert(\"Your browser doesn't support a stable version of IndexedDB.\")\n}\n</pre>\n"
                },
                {
                    "title": "Open an IndexedDB database",
                    "html": "<p>\n Before creating a database, we have to prepare some data for the data base.let's start with company employee details.\n</p>\n<pre class=\"prettyprint notranslate\">\nconst employeeData = [\n   { id: \"01\", name: \"Gopal K Varma\", age: 35, email: \"contact@tutorialspoint.com\" },\n   { id: \"02\", name: \"Prasad\", age: 24, email: \"prasad@tutorialspoint.com\" }\n];\n</pre>\n"
                },
                {
                    "title": "Adding the data",
                    "html": "<p>\n Here adding some data manually into the data as shown below −\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction add() {\n   var request = db.transaction([\"employee\"], \"readwrite\")\n   .objectStore(\"employee\")\n   .add({ id: \"01\", name: \"prasad\", age: 24, email: \"prasad@tutorialspoint.com\" });\n   \n   request.onsuccess = function(event) {\n      alert(\"Prasad has been added to your database.\");\n   };\n   \n   request.onerror = function(event) {\n      alert(\"Unable to add data\\r\\nPrasad is already exist in your database! \");\n   }\n}\n</pre>\n"
                },
                {
                    "title": "Retrieving Data",
                    "html": "<p>\n We can retrieve the data from the data base using with get()\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction read() {\n   var transaction = db.transaction([\"employee\"]);\n   var objectStore = transaction.objectStore(\"employee\");\n   var request = objectStore.get(\"00-03\");\n   \n   request.onerror = function(event) {\n      alert(\"Unable to retrieve daa from database!\");\n   };\n   \n   request.onsuccess = function(event) {\n      \n      if(request.result) {\n         alert(\"Name: \" + request.result.name + \", Age: \n            \" + request.result.age + \", Email: \" + request.result.email);\n      } else {\n         alert(\"Kenny couldn't be found in your database!\");  \n      }\n   };\n}\n</pre>\n<p>\n Using with get(), we can store the data in object instead of that we can store the data in cursor and we can retrieve the data from cursor.\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction readAll() {\n   var objectStore = db.transaction(\"employee\").objectStore(\"employee\");\n   \n   objectStore.openCursor().onsuccess = function(event) {\n      var cursor = event.target.result;\n      \n      if (cursor) {\n         alert(\"Name for id \" + cursor.key + \" is \" + cursor.value.name + \", \n            Age: \" + cursor.value.age + \", Email: \" + cursor.value.email);\n         cursor.continue();\n      } else {\n         alert(\"No more entries!\");\n      }\n   };\n}\n</pre>\n"
                },
                {
                    "title": "Removing the data",
                    "html": "<p>\n We can remove the data from IndexedDB with remove().Here is how the code looks like\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction remove() {\n   var request = db.transaction([\"employee\"], \"readwrite\")\n   .objectStore(\"employee\")\n   .delete(\"02\");\n   \n   request.onsuccess = function(event) {\n      alert(\"prasad entry has been removed from your database.\");\n   };\n}\n</pre>\n"
                },
                {
                    "title": "HTML Code",
                    "html": "<p>\n To show all the data we need to use onClick event as shown below code −\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;meta http-equiv = \"Content-Type\" content = \"text/html; charset = utf-8\" /&gt;\n      &lt;title&gt;IndexedDb Demo | onlyWebPro.com&lt;/title&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;button onclick = \"read()\"&gt;Read &lt;/button&gt;\n      &lt;button onclick = \"readAll()\"&gt;&lt;/button&gt;\n      &lt;button onclick = \"add()\"&gt;&lt;/button&gt;\n      &lt;button onclick = \"remove()\"&gt;Delete &lt;/button&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n The final code should be as −\n</p>\n<pre class=\"prettyprint notranslate\">\n&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;meta http-equiv = \"Content-Type\" content = \"text/html; charset = utf-8\" /&gt;\n      &lt;script type = \"text/javascript\"&gt;\n         \n         //prefixes of implementation that we want to test\n         window.indexedDB = window.indexedDB || window.mozIndexedDB || \n         window.webkitIndexedDB || window.msIndexedDB;\n         \n         //prefixes of window.IDB objects\n         window.IDBTransaction = window.IDBTransaction || \n         window.webkitIDBTransaction || window.msIDBTransaction;\n         window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || \n         window.msIDBKeyRange\n         \n         if (!window.indexedDB) {\n            window.alert(\"Your browser doesn't support a stable version of IndexedDB.\")\n         }\n         \n         const employeeData = [\n            { id: \"00-01\", name: \"gopal\", age: 35, email: \"gopal@tutorialspoint.com\" },\n            { id: \"00-02\", name: \"prasad\", age: 32, email: \"prasad@tutorialspoint.com\" }\n         ];\n         var db;\n         var request = window.indexedDB.open(\"newDatabase\", 1);\n         \n         request.onerror = function(event) {\n            console.log(\"error: \");\n         };\n         \n         request.onsuccess = function(event) {\n            db = request.result;\n            console.log(\"success: \"+ db);\n         };\n         \n         request.onupgradeneeded = function(event) {\n            var db = event.target.result;\n            var objectStore = db.createObjectStore(\"employee\", {keyPath: \"id\"});\n            \n            for (var i in employeeData) {\n               objectStore.add(employeeData[i]);\n            }\n         }\n         \n         function read() {\n            var transaction = db.transaction([\"employee\"]);\n            var objectStore = transaction.objectStore(\"employee\");\n            var request = objectStore.get(\"00-03\");\n            \n            request.onerror = function(event) {\n               alert(\"Unable to retrieve daa from database!\");\n            };\n            \n            request.onsuccess = function(event) {\n               // Do something with the request.result!\n               if(request.result) {\n                  alert(\"Name: \" + request.result.name + \", \n                     Age: \" + request.result.age + \", Email: \" + request.result.email);\n               } else {\n                  alert(\"Kenny couldn't be found in your database!\");\n               }\n            };\n         }\n         \n         function readAll() {\n            var objectStore = db.transaction(\"employee\").objectStore(\"employee\");\n            \n            objectStore.openCursor().onsuccess = function(event) {\n               var cursor = event.target.result;\n               \n               if (cursor) {\n                  alert(\"Name for id \" + cursor.key + \" is \" + cursor.value.name + \", \n                     Age: \" + cursor.value.age + \", Email: \" + cursor.value.email);\n                  cursor.continue();\n               } else {\n                  alert(\"No more entries!\");\n               }\n            };\n         }\n         \n         function add() {\n            var request = db.transaction([\"employee\"], \"readwrite\")\n            .objectStore(\"employee\")\n            .add({ id: \"00-03\", name: \"Kenny\", age: 19, email: \"kenny@planet.org\" });\n            \n            request.onsuccess = function(event) {\n               alert(\"Kenny has been added to your database.\");\n            };\n            \n            request.onerror = function(event) {\n               alert(\"Unable to add data\\r\\nKenny is aready exist in your database! \");\n            }\n         }\n         \n         function remove() {\n            var request = db.transaction([\"employee\"], \"readwrite\")\n            .objectStore(\"employee\")\n            .delete(\"00-03\");\n            \n            request.onsuccess = function(event) {\n               alert(\"Kenny's entry has been removed from your database.\");\n            };\n         }\n      &lt;/script&gt;\n      \n   &lt;/head&gt;\n   &lt;body&gt;\n      &lt;button onclick = \"read()\"&gt;Read &lt;/button&gt;\n      &lt;button onclick = \"readAll()\"&gt;Read all &lt;/button&gt;\n      &lt;button onclick = \"add()\"&gt;Add data &lt;/button&gt;\n      &lt;button onclick = \"remove()\"&gt;Delete data &lt;/button&gt;\n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n It will produce the following output −\n</p>\n<iframe class=\"result\" height=\"100px\" onload=\"resizeFrame(this)\" src=\"/html5/src/indexeddb.htm\" width=\"660px\">\n</iframe>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_web_workers.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_web_messaging.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Web Messaging",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>Web messaging is the ability to send realtime messages from the server to the client browser. It overrides the cross domain communication problem in different domains, protocols or ports</p>\n<p>For example, you want to send the data from your page to ad container which is placed at iframe or voice-versa, in this scenario, Browser throws a security exception. With web messaging we can pass the data across as a message event.</p>\n"
                },
                {
                    "title": "Message Event",
                    "html": "<p>\n Message events fires Cross-document messaging, channel messaging, server-sent events and web sockets.it has described by Message Event interface.\n</p>\n"
                },
                {
                    "title": "Attributes",
                    "html": "<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;\">\n   Attributes &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     data\n    </b>\n   </p>\n   <p>\n    Contains string data\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     origin\n    </b>\n   </p>\n   <p>\n    Contains Domain name and port\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     lastEventId\n    </b>\n   </p>\n   <p>\n    Contains unique identifier for the current message event.\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     source\n    </b>\n   </p>\n   <p>\n    Contains to A reference to the originating document’s window\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     ports\n    </b>\n   </p>\n   <p>\n    Contains the data which is sent by any message port\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "Sending a cross-document message",
                    "html": "<p>\n Before send cross document message, we need to create a new web browsing context either by creating new iframe or new window. We can send the data using with postMessage() and it has two arguments. They are as −\n</p>\n<ul class=\"list\">\n <li>\n  <b>\n   message\n  </b>\n  − The message to send\n </li>\n <li>\n  <b>\n   targetOrigin\n  </b>\n  − Origin name\n </li>\n</ul>\n<h3>\n Examples\n</h3>\n<p>\n Sending message from iframe to button\n</p>\n<pre class=\"prettyprint notranslate\">\nvar iframe = document.querySelector('iframe');\nvar button = document.querySelector('button');\n\nvar clickHandler = function() {\n   iframe.contentWindow.postMessage('The message to send.',\n      'https://www.tutorialspoint.com);\n}\nbutton.addEventListener('click',clickHandler,false);\n</pre>\n<p>\n Receiving a cross-document message in the receiving document\n</p>\n<pre class=\"prettyprint notranslate\">\nvar messageEventHandler = function(event){\n   \n   // check that the origin is one we want.\n   if(event.origin == 'https://www.tutorialspoint.com') {\n      alert(event.data);\n   }\n}\nwindow.addEventListener('message', messageEventHandler,false);\n</pre>\n"
                },
                {
                    "title": "Channel messaging",
                    "html": "<p>\n Two-way communication between the browsing contexts is called channel messaging. It is useful for communication across multiple origins.\n</p>\n"
                },
                {
                    "title": "The MessageChannel and MessagePort Objects",
                    "html": "<p>\n While creating messageChannel, it internally creates two ports to sending the data and forwarded to another browsing context.\n</p>\n<ul class=\"list\">\n <li>\n  <p>\n   <b>\n    postMessage()\n   </b>\n   − Post the message throw channel\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    start()\n   </b>\n   − It sends the data\n  </p>\n </li>\n <li>\n  <p>\n   <b>\n    close()\n   </b>\n   − It close the ports\n  </p>\n </li>\n</ul>\n<p>\n In this scenario, we are sending the data from one iframe to another iframe. Here we are invoking the data in function and passing the data to DOM.\n</p>\n<pre class=\"prettyprint notranslate\">\nvar loadHandler = function() {\n   var mc, portMessageHandler;\n   mc = new MessageChannel();\n   window.parent.postMessage('documentAHasLoaded','http://foo.example',[mc.port2]);\n   \n   portMessageHandler = function(portMsgEvent) {\n      alert( portMsgEvent.data );\n   }\n   \n   mc.port1.addEventListener('message', portMessageHandler, false);\n   mc.port1.start();\n}\nwindow.addEventListener('DOMContentLoaded', loadHandler, false);\n</pre>\n<p>\n Above code, it is taking the data from port 2, now it will pass the data to second iframe\n</p>\n<pre class=\"prettyprint notranslate\">\nvar loadHandler = function() {\n   var iframes, messageHandler;\n   iframes = window.frames;\n   \n   messageHandler = function(messageEvent) {\n      \n      if( messageEvent.ports.length &gt; 0 ) {\n         \n         // transfer the port to iframe[1]\n         iframes[1].postMessage('portopen','http://foo.example',messageEvent.ports);\n      }\n   }\n   window.addEventListener('message',messageHandler,false);\n}\nwindow.addEventListener('DOMContentLoaded',loadHandler,false);\n</pre>\n<p>\n Now second document handles the data by using the portMsgHandler function.\n</p>\n<pre class=\"prettyprint notranslate\">\nvar loadHandler() {\n   \n   // Define our message handler function\n   var messageHandler = function(messageEvent) {\n   \n      // Our form submission handler\n      \n      var formHandler = function() {\n         var msg = 'add &lt;foo@example.com&gt; to game circle.';\n         messageEvent.ports[0].postMessage(msg);\n      }\n      document.forms[0].addEventListener('submit',formHandler,false);\n   }\n   window.addEventListener('message',messageHandler,false);\n}\nwindow.addEventListener('DOMContentLoaded',loadHandler,false);\n</pre>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_indexeddb.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_cors.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Web CORS",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p><b>Cross-origin resource sharing (CORS)</b> is a mechanism to allows the restricted resources from another domain in web browser.</p>\n<p>For suppose, if you click on <i>HTML5- video player</i> in html5 demo sections. it will ask camera permission. if user allow the permission then only it will open the camera or else it doesn't open the camera for web applications.</p>\n"
                },
                {
                    "title": "Making a CORS request",
                    "html": "<p>\n Here Chrome, Firefox, Opera and Safari all use the XMLHttprequest2 object and Internet Explorer uses the similar XDomainRequest object, object.\n</p>\n<pre class=\"prettyprint notranslate\">\nfunction createCORSRequest(method, url) {\n   var xhr = new XMLHttpRequest();\n   \n   if (\"withCredentials\" in xhr) {\n      \n      // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n      // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n      xhr.open(method, url, true);\n   } else if (typeof XDomainRequest != \"undefined\") {\n      \n      // Otherwise, check if XDomainRequest.\n      // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n      xhr = new XDomainRequest();\n      xhr.open(method, url);\n   } else {\n      \n      // Otherwise, CORS is not supported by the browser.\n      xhr = null;\n   }\n   return xhr;\n}\n\nvar xhr = createCORSRequest('GET', url);\n\nif (!xhr) {\n   throw new Error('CORS not supported');\n}\n</pre>\n"
                },
                {
                    "title": "Event handles in CORS",
                    "html": "<table class=\"table table-bordered\">\n <tr>\n  <th style=\"text-align:center;vertical-align:middle\">\n   Sr.No.\n  </th>\n  <th style=\"text-align:center;vertical-align:middle\">\n   Event Handler &amp; Description\n  </th>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   1\n  </td>\n  <td>\n   <p>\n    <b>\n     onloadstart\n    </b>\n   </p>\n   <p>\n    Starts the request\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   2\n  </td>\n  <td>\n   <p>\n    <b>\n     onprogress\n    </b>\n   </p>\n   <p>\n    Loads the data and send the data\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   3\n  </td>\n  <td>\n   <p>\n    <b>\n     onabort\n    </b>\n   </p>\n   <p>\n    Abort the request\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   4\n  </td>\n  <td>\n   <p>\n    <b>\n     onerror\n    </b>\n   </p>\n   <p>\n    request has failed\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   5\n  </td>\n  <td>\n   <p>\n    <b>\n     onload\n    </b>\n   </p>\n   <p>\n    request load successfully\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   6\n  </td>\n  <td>\n   <p>\n    <b>\n     ontimeout\n    </b>\n   </p>\n   <p>\n    time out has happened before request could complete\n   </p>\n  </td>\n </tr>\n <tr>\n  <td style=\"text-align:center;vertical-align:middle\">\n   7\n  </td>\n  <td>\n   <p>\n    <b>\n     onloadend\n    </b>\n   </p>\n   <p>\n    When the request is complete either successful or failure\n   </p>\n  </td>\n </tr>\n</table>\n"
                },
                {
                    "title": "Example of onload or onerror event",
                    "html": "<pre class=\"prettyprint notranslate\">\nxhr.onload = function() {\n   var responseText = xhr.responseText;\n   \n   // process the response.\n   console.log(responseText);\n};\n\nxhr.onerror = function() {\n   console.log('There was an error!');\n};\n</pre>\n"
                },
                {
                    "title": "Example of CORS with handler",
                    "html": "<p>\n Below example will show the example of makeCorsRequest() and onload handler\n</p>\n<pre class=\"prettyprint notranslate\">\n// Create the XHR object.\nfunction createCORSRequest(method, url) {\n   var xhr = new XMLHttpRequest();\n   \n   if (\"withCredentials\" in xhr) {\n      \n      // XHR for Chrome/Firefox/Opera/Safari.\n      xhr.open(method, url, true);\n   } else if (typeof XDomainRequest != \"undefined\") {\n      \n      // XDomainRequest for IE.\n      xhr = new XDomainRequest();\n      xhr.open(method, url);\n   } else {\n      \n      // CORS not supported.\n      xhr = null;\n   }\n   return xhr;\n}\n\n// Helper method to parse the title tag from the response.\nfunction getTitle(text) {\n   return text.match('&lt;title&gt;(.*)?&lt;/title&gt;')[1];\n}\n\n// Make the actual CORS request.\nfunction makeCorsRequest() {\n   \n   // All HTML5 Rocks properties support CORS.\n   var url = 'http://www.tutorialspoint.com';\n   \n   var xhr = createCORSRequest('GET', url);\n   \n   if (!xhr) {\n      alert('CORS not supported');\n      return;\n   }\n   \n   // Response handlers.\n   xhr.onload = function() {\n      var text = xhr.responseText;\n      var title = getTitle(text);\n      alert('Response from CORS request to ' + url + ': ' + title);\n   };\n   \n   xhr.onerror = function() {\n      alert('Woops, there was an error making the request.');\n   };\n   xhr.send();\n}\n</pre>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_web_messaging.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/html5_web_rtc.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        },
        {
            "title": "Web RTC",
            "parts": [
                {
                    "title": "Introduction",
                    "html": "\n<p>Web RTC introduced by World Wide Web Consortium (W3C). That supports browser-tobrowser applications for voice calling, video chat, and P2P file sharing.</p>\n<p>If you want to try out? web RTC available for Chrome, Opera, and Firefox. A good place to start is the simple video chat application at <a href=\"http://apprtc.appspot.com/\" rel=\"nofollow\" target=\"_blank\">here</a>. Web RTC implements three API's as shown below −</p>\n<ul class=\"list\">\n<li><p><b>MediaStream</b> − get access to the user's camera and microphone.</p></li>\n<li><p><b>RTCPeerConnection</b> − get access to audio or video calling facility.</p></li>\n<li><p><b>RTCDataChannel</b> − get access to peer-to-peer communication.</p></li>\n</ul>\n"
                },
                {
                    "title": "MediaStream",
                    "html": "<p>\n The MediaStream represents synchronized streams of media, For an example, Click on HTML5 Video player in HTML5 demo section or else click\n <a href=\"http://simpl.info/getusermedia/\" rel=\"nofollow\" target=\"_blank\">\n  here\n </a>\n .\n</p>\n<p>\n The above example contains stream.getAudioTracks() and stream.VideoTracks(). If there is no audio tracks, it returns an empty array and it will check video stream,if webcam connected, stream.getVideoTracks() returns an array of one MediaStreamTrack representing the stream from the webcam. A simple example is chat applications, a chat application gets stream from web camera, rear camera, microphone.\n</p>\n"
                },
                {
                    "title": "Sample code of MediaStream",
                    "html": "<pre class=\"prettyprint notranslate\">\nfunction gotStream(stream) {\n   window.AudioContext = window.AudioContext || window.webkitAudioContext;\n   var audioContext = new AudioContext();\n   \n   // Create an AudioNode from the stream\n   var mediaStreamSource = audioContext.createMediaStreamSource(stream);\n   \n   // Connect it to destination to hear yourself\n   // or any other node for processing!\n   mediaStreamSource.connect(audioContext.destination);\n}\nnavigator.getUserMedia({audio:true}, gotStream);\n</pre>\n"
                },
                {
                    "title": "Screen capture",
                    "html": "<p>\n It's also possible in Chrome browser with mediaStreamSource and it requires HTTPS. This feature is not yet available in opera. Sample demo is available at\n <a href=\"https://html5-demos.appspot.com/static/getusermedia/screenshare.html\" rel=\"nofollow\" target=\"_blank\">\n  here\n </a>\n</p>\n"
                },
                {
                    "title": "Session Control, Network & Media Information",
                    "html": "<p>\n Web RTC required peer-to-peer communication between browsers. This mechanism required signaling, network information, session control and media information. Web developers can choose different mechanism to communicate between the browsers such as SIP or XMPP or any two way communications. A sample example of XHR is\n <a href=\"https://apprtc.appspot.com/\" rel=\"nofollow\" target=\"_blank\">\n  here\n </a>\n .\n</p>\n<h3>\n Sample code of createSignalingChannel()\n</h3>\n<pre class=\"prettyprint notranslate\">\nvar signalingChannel = createSignalingChannel();\nvar pc;\nvar configuration = ...;\n\n// run start(true) to initiate a call\nfunction start(isCaller) {\n   pc = new RTCPeerConnection(configuration);\n   \n   // send any ice candidates to the other peer\n   pc.onicecandidate = function (evt) {\n      signalingChannel.send(JSON.stringify({ \"candidate\": evt.candidate }));\n   };\n   \n   // once remote stream arrives, show it in the remote video element\n   pc.onaddstream = function (evt) {\n      remoteView.src = URL.createObjectURL(evt.stream);\n   };\n   \n   // get the local stream, show it in the local video element and send it\n   navigator.getUserMedia({ \"audio\": true, \"video\": true }, function (stream) {\n      selfView.src = URL.createObjectURL(stream);\n      pc.addStream(stream);\n      \n      if (isCaller)\n         pc.createOffer(gotDescription);\n      \n      else\n         pc.createAnswer(pc.remoteDescription, gotDescription);\n         \n         function gotDescription(desc) {\n            pc.setLocalDescription(desc);\n            signalingChannel.send(JSON.stringify({ \"sdp\": desc }));\n         }\n      });\n   }\n   \n   signalingChannel.onmessage = function (evt) {\n      if (!pc)\n         start(false);\n         var signal = JSON.parse(evt.data);\n      \n      if (signal.sdp)\n         pc.setRemoteDescription(new RTCSessionDescription(signal.sdp));\n      \n      else\n         pc.addIceCandidate(new RTCIceCandidate(signal.candidate));\n};\n</pre>\n<div class=\"d-flex justify-content-between border-bottom border-top py-2\" id=\"bottom_navigation\">\n <a class=\"pre-btn\" href=\"/html5/html5_cors.htm\">\n  <i class=\"fal fa-chevron-circle-left\">\n  </i>\n  Previous Page\n </a>\n <a class=\"pre-btn d-none d-sm-block\" href=\"#\" id=\"print-page\">\n  <i class=\"fal fa-print\">\n  </i>\n  Print Page\n </a>\n <a class=\"nxt-btn\" href=\"/html5/web_storage.htm\">\n  Next Page\n  <i class=\"fal fa-chevron-circle-right\">\n  </i>\n </a>\n</div>\n<div class=\"google-bottom-ads\" id=\"google-bottom-ads\">\n <div>\n  Advertisements\n </div>\n <div>\n  <div id=\"adp_bottom_ads\">\n  </div>\n  <script>\n   var adPos = document.getElementById('adp_bottom_ads');\n\t\t\t\t\t\tvar mobile_ad_id = \"6d621d7e-9531-4f26-810f-68af67dc6366\";\n\t\t\t\t\t\tvar desktop_ad_id = \"4951d1d6-24d4-4a31-afb7-2c22c489eae1\";\n\t\t\t\t\t\tvar adpushup = adpushup || {};\n\t\t\t\t\t\tadpushup.que = adpushup.que || [];\n\t\t\t\t\t\tadpushup.que.push(function() {\n\t\t\t\t\t\t\tvar ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;\n\t\t\t\t\t\t\tadPos.innerHTML = '<div id=\"' + ad_id + '\" class=\"_ap_apex_ad\"></div>';\n\t\t\t\t\t\t\tadpushup.triggerAd(ad_id);\n\t\t\t\t\t\t});\n  </script>\n </div>\n</div>\n"
                }
            ]
        }
    ]
}